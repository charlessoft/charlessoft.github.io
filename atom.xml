<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[学海拾贝 Blog]]></title>
  <link href="http://charlessoft.github.io/atom.xml" rel="self"/>
  <link href="http://charlessoft.github.io/"/>
  <updated>2014-06-01T18:59:35+08:00</updated>
  <id>http://charlessoft.github.io/</id>
  <author>
    <name><![CDATA[charlessoft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Authorized_keys权限导致登陆失败问题]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/25/ssh-authorized-keysmian-mi-ma-shi-bai-wen-ti/"/>
    <updated>2014-05-25T13:34:22+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/25/ssh-authorized-keysmian-mi-ma-shi-bai-wen-ti</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>authorized_keys 是将用户的公钥,保存在登陆$HOME/.ssh/authorized_keys,公钥是一段字符串,只要把它追加在authorized_keys文件的末尾就行了,下次用户可以免密码登陆.</p>

<p>经过测试免密码登陆<code>CentOs Linux 6.5 X64位</code>系统与<code>authorized_keys</code>文件权限有关系</p>

<p><img src="http://charlessoft.github.io/../images/ssh_authorized/ssh_authorized_key_1.png"><br/>
有上图看出authorized_keys 权限是<code>-rw-rw-r-</code>
即使把客户端的id_rsa.pub 保存到服务器的authorized_keys上也连接不了,需要把属性修改成<code>-rw-r--r--</code>或者<code>-rw------</code></p>

<p>修改命令:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod 644 authorized_keys
</span><span class='line'>或
</span><span class='line'>chmod 600 authorized_keys</span></code></pre></td></tr></table></div></figure>


<p><img src="http://charlessoft.github.io/../images/ssh_authorized/ssh_authorized_key_2.png"><br/>
这样就可以连接上</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 批量增加用户]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/20/linux-pi-liang-zeng-jia-yong-hu/"/>
    <updated>2014-05-20T23:10:05+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/20/linux-pi-liang-zeng-jia-yong-hu</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>linux下经常需要增加用户进行执行脚本,下文介绍使用shell脚本增加用户,可以实现批量增加用户.</p>

<!--more-->


<h2>步骤</h2>

<h3>相关命令</h3>

<ol>
<li>newusers &mdash;新建用户</li>
<li>chpasswd &mdash;修改用户密码</li>
</ol>


<p>建立一个和/etc/passwd 一样的文本内容userlist.txt</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ubuntu00:x:520:520::/home/ubuntu00:/bin/bash
</span><span class='line'>ubuntu01:x:521:521::/home/ubuntu01:/bin/bash
</span><span class='line'>ubuntu02:x:522:522::/home/ubuntu02:/bin/bash
</span><span class='line'>ubuntu03:x:523:523::/home/ubuntu03:/bin/bash
</span><span class='line'>ubuntu04:x:524:524::/home/ubuntu04:/bin/bash
</span><span class='line'>ubuntu05:x:525:525::/home/ubuntu05:/bin/bash
</span><span class='line'>ubuntu06:x:526:526::/home/ubuntu06:/bin/bash
</span><span class='line'>ubuntu07:x:527:527::/home/ubuntu07:/bin/bash
</span><span class='line'>ubuntu08:x:528:528::/home/ubuntu08:/bin/bash
</span><span class='line'>ubuntu09:x:529:529::/home/ubuntu09:/bin/bash
</span></code></pre></td></tr></table></div></figure>


<p>建立一个password.txt 文件,保存用户名对应的密码,格式如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ubuntu00:123456
</span><span class='line'>ubuntu01:123456
</span><span class='line'>ubuntu02:123456
</span><span class='line'>ubuntu03:123456
</span><span class='line'>ubuntu04:123456
</span><span class='line'>ubuntu05:123456
</span><span class='line'>ubuntu06:123456
</span><span class='line'>ubuntu07:123456
</span><span class='line'>ubuntu08:123456
</span><span class='line'>ubuntu09:123456</span></code></pre></td></tr></table></div></figure>


<h3>使用命令</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>newusers userlist.txt
</span><span class='line'>chpasswd &lt; password.txt</span></code></pre></td></tr></table></div></figure>


<p>就添加完成了,su &ndash; ubuntu00 输入密码123456,就切换到该用户下,可以输入bash,使用bash.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[V8 Engine编译]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/10/v8-enginebian-yi/"/>
    <updated>2014-05-10T15:32:28+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/10/v8-enginebian-yi</id>
    <content type="html"><![CDATA[<h1>概述</h1>

<p>V8 Engine 用来编译javascript, chrome浏览器就是使用该引擎,V8 引擎是独立的模块,可以直接嵌入到程序中执行js脚本</p>

<!--more-->


<h2>windows 编译</h2>

<h3>1. 工具</h3>

<blockquote><p>V8</p>

<p>svn checkout <a href="http://v8.googlecode.com/svn/branches/bleeding_edge/">http://v8.googlecode.com/svn/branches/bleeding_edge/</a> v8</p>

<p>python</p>

<p>svn co <a href="http://src.chromium.org/svn/trunk/tools/thirdparty/python26@89111">http://src.chromium.org/svn/trunk/tools/thirdparty/python26@89111</a> thirdparty/python26</p>

<p>cygwin</p>

<p>svn co <a href="http://src.chromium.org/svn/trunk/deps/thirdparty/cygwin@231940">http://src.chromium.org/svn/trunk/deps/thirdparty/cygwin@231940</a> thirdparty/cygwin</p>

<p>icu</p>

<p>svn co <a href="https://src.chromium.org/chrome/trunk/deps/thirdparty/icu46">https://src.chromium.org/chrome/trunk/deps/thirdparty/icu46</a> thirdparty/icu</p>

<p>gyp</p>

<p>svn co <a href="http://gyp.googlecode.com/svn/trunk">http://gyp.googlecode.com/svn/trunk</a> build/gyp</p></blockquote>

<h3>2. 编译步骤</h3>

<blockquote><p>把下载后的third_party拷贝到v8目录下,设置python的环境变量,方便直接调用python命令</p>

<p>cd 到v8目录下,执行命令python build\gyp_v8 生成工程文件</p>

<p>&ldquo;c:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\devenv.com&rdquo; /build Release build\All.sln</p></blockquote>

<h3>3. 调试步骤</h3>

<blockquote><p>使用vs2010打开All.sln编译好的工程,
可以进行调试,设置启动项为 sample/shell,运行shell print(&lsquo;hello world!&rsquo;);</p></blockquote>

<h3>4. 参考资料</h3>

<blockquote><p><a href="http://blog.chinaunix.net/uid-8272118-id-2033359.html">关于V8 JavaScript Engine的使用方法研究(一)</a></p>

<p><a href="http://www.cppblog.com/weiym/archive/2012/05/19/175374.html">如何在程序中嵌入google的V8 Javascript引擎</a></p>

<p><a href="http://blog.csdn.net/zengraoli/article/details/9178219">编译v8引擎</a></p>

<p><a href="https://code.google.com/p/v8/wiki/BuildingWithGYP">BuildingWithGYP</a></p>

<p><a href="http://hi.baidu.com/hycjk/item/f137d2e5616e64b52f140bd7">V8系列——内存管理(1)</a></p>

<p><a href="http://hi.baidu.com/hycjk/item/c79470d1f35fac95260ae7da">V8系列——内存管理</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把json字符串转换成C++类对象(二)]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/10/json2c-plus-plus2/"/>
    <updated>2014-05-10T01:25:15+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/10/json2c-plus-plus2</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>上一篇文章中讲述了在C++中如何把json字符串转换成c++类对象,<a href="http://charlessoft.github.io/blog/2014/05/09/jsonzhuan-huan-lei-dui-xiang-c-plus-plus/">把json字符串转换成C++类对象(一)</a>其中使用到了开源库(jsoncpp),函数指针,事先需要声明每个类相关代码,遍历完毕json字符串就得到对应类对象</p>

<!--more-->


<p>事先声明的代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>typedef void ( CStudentItem::*StudentItemFunc )( string key, void* value );
</span><span class='line'>
</span><span class='line'>typedef map&lt;string, StudentItemFunc&gt;JsonMethodMap;
</span><span class='line'>
</span><span class='line'>JsonMethodMap m_jsonMethodMap;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>void Set_XXX( string strKey, void* value );
</span><span class='line'>
</span><span class='line'>virtual void DealJsonNode( string strNode, string value );
</span><span class='line'>
</span><span class='line'>virtual void DealJsonNode( string strNode, int value );
</span></code></pre></td></tr></table></div></figure>


<p>当json字符串很多的时候.就造成每次都要声明重复的代码,过程很繁琐,而且容易写错,如何解决这个问题,或者可以相对简便些?</p>

<p>我想到了用宏定义来声明函数类似MFC中插入DECLARE_DYNAMIC等宏的方式,</p>

<p>我们把重复的代码提取出来,变成宏定义,插入到类声明中</p>

<p>宏定义</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define JSON_TYPE_STRING 1
</span><span class='line'>#define JSON_TYPE_INT 2
</span><span class='line'>#define JSON_TYPE_DOUBLE 3
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#define JSON_DEFINE_METHODMAP( theclass ) \
</span><span class='line'>    typedef void ( theclass::*theclass##Func )( string strNode, void* value ); \
</span><span class='line'>        typedef map&lt;string, theclass##Func&gt;JsonMethodMap; \
</span><span class='line'>            JsonMethodMap m_jsonmapfunc;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#define JSON_DEAL_NODE_STRING() \
</span><span class='line'>    virtual void DealJsonNode( string strNode, string value ){ \
</span><span class='line'>        JsonMethodMap::iterator Iter = m_jsonmapfunc.find( strNode ); \
</span><span class='line'>        if ( Iter != m_jsonmapfunc.end() ) \
</span><span class='line'>        { \
</span><span class='line'>            (this-&gt;*m_jsonmapfunc[strNode])( strNode,  (void*)value.c_str() ); \
</span><span class='line'>        } \
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>#define JSON_DEAL_NODE_INT() \
</span><span class='line'>    virtual void DealJsonNode( string strNode, int value ){ \
</span><span class='line'>        JsonMethodMap::iterator Iter = m_jsonmapfunc.find( strNode ); \
</span><span class='line'>        if ( Iter != m_jsonmapfunc.end() ) \
</span><span class='line'>        { \
</span><span class='line'>            (this-&gt;*m_jsonmapfunc[strNode])( strNode,  (void*)value ); \
</span><span class='line'>        } \
</span><span class='line'>    }
</span></code></pre></td></tr></table></div></figure>


<p>修改后的代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>class CStudentItem : public IParseJson
</span><span class='line'>{
</span><span class='line'>    public:
</span><span class='line'>        string m_name;
</span><span class='line'>
</span><span class='line'>        int m_age;
</span><span class='line'>
</span><span class='line'>        string m_sex;
</span><span class='line'>        //设置函数指针
</span><span class='line'>        CStudentItem()
</span><span class='line'>        {
</span><span class='line'>            //设置结点对应的函数指针
</span><span class='line'>            m_jsonMethodMap["name"] = &CStudentItem::Set_Name;
</span><span class='line'>            m_jsonMethodMap["age"] = &CStudentItem::Set_Age;
</span><span class='line'>            m_jsonMethodMap["sex"] = &CStudentItem::Set_Sex;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        virtual ~CStudentItem(){}
</span><span class='line'>
</span><span class='line'>        //定义 JsonMethodMap
</span><span class='line'>        DECLARE_DYNAMIC( CStudentItem )
</span><span class='line'>
</span><span class='line'>        JSON_TYPE_STRING()
</span><span class='line'>
</span><span class='line'>        JSON_TYPE_INT()
</span><span class='line'>        //定义 JsonMethodMap
</span><span class='line'>
</span><span class='line'>        void Set_Name( string strKey, void* value )
</span><span class='line'>        {
</span><span class='line'>            this-&gt;m_name = (char*)value;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        void Set_Age( string strKey, void* value )
</span><span class='line'>        {
</span><span class='line'>            this-&gt;m_age = (intptr_t)value;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        void Set_Sex( string strKey, void* value )
</span><span class='line'>        {
</span><span class='line'>            this-&gt;m_sex = (char*)value;
</span><span class='line'>        }
</span><span class='line'>        //设置函数指针
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        //在map中找到对应的函数指针,对成员变量进行赋值
</span><span class='line'>
</span><span class='line'>        virtual IParseJson* CreateJsonItem( string strKey )
</span><span class='line'>        {
</span><span class='line'>            return this; //该类中没有一些数组,直接返回自身就好
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>};
</span></code></pre></td></tr></table></div></figure>


<p>剩下的每个类就只需要定义Set_XXX进行设置就好了. 后期看看怎么把Set_XXX函数进行优化.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把json字符串转换成C++类对象(一)]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/09/jsonzhuan-huan-lei-dui-xiang-c-plus-plus/"/>
    <updated>2014-05-09T13:49:11+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/09/jsonzhuan-huan-lei-dui-xiang-c-plus-plus</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>c++中获取到json字符串后,每次需要遍历json字符串,然后把该json字符串中各个key对应的value取出来,赋值给各自的类对象.本文介绍如何把json字符串转成C++类对象</p>

<!--more-->


<h2>相关库</h2>

<h3>1. jsoncpp</h3>

<p>用于解析、遍历json库</p>

<h2>原理</h2>

<h3>1. 遍历json</h3>

<h3>2. 函数指针赋值</h3>

<p>根据json字符串,定义对应类,例如:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "students": [
</span><span class='line'>        {
</span><span class='line'>            "name": "zhangsan",
</span><span class='line'>            "age": 20,
</span><span class='line'>            "sex": "男"
</span><span class='line'>        },
</span><span class='line'>        {
</span><span class='line'>            "name": "lisi",
</span><span class='line'>            "age": 21,
</span><span class='line'>            "sex": "女"
</span><span class='line'>        }
</span><span class='line'>    ]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>从以上json格式看,<code>students</code>节点包含2个数组,每个数组中都有一个<code>name</code>和<code>age</code>, 我们可以定义2个类, <code>CStudents</code>和<code>CStudentItem</code>类,
<code>CStudents</code>包含<code>CStudentItem</code>成员对象, <code>CStudentItem</code>包含<code>name</code>、<code>age</code>和<code>sex</code>成员函数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class CStudentItem
</span><span class='line'>{
</span><span class='line'>private:
</span><span class='line'>    CStudentItem(){}
</span><span class='line'>
</span><span class='line'>    virtual ~CStudentItem(){}
</span><span class='line'>
</span><span class='line'>    string m_name;
</span><span class='line'>
</span><span class='line'>    int_ptr_t m_age;
</span><span class='line'>
</span><span class='line'>    string sex;
</span><span class='line'>    
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>class CStudents
</span><span class='line'>{
</span><span class='line'>private:
</span><span class='line'>    vector&lt;CStudentItem*&gt; m_StudentItemArr;
</span><span class='line'>};
</span></code></pre></td></tr></table></div></figure>


<p>下一步 我们需要解析Json,把json中对象的值设置到以上对应的类对象中,我们就面临2个问题,<br/>
1. 怎么遍历?可以从jsoncpp的demo中找到答案-见下面代码<br/>
2. 遍历完怎么设置到对应对象中?使用函数指针.</p>

<h4>遍历json</h4>

<p>建立一个IParseJson类,用于解析遍历Json<br/>
IParseJson.h</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>class IParseJson  
</span><span class='line'>{  
</span><span class='line'>
</span><span class='line'>public:
</span><span class='line'>  
</span><span class='line'>  IParseJson() {}   
</span><span class='line'>
</span><span class='line'>  virtual ~IParseJson() {}
</span><span class='line'>
</span><span class='line'>  virtual BOOL ParseJson( const char* json );
</span><span class='line'>
</span><span class='line'>protected:
</span><span class='line'>
</span><span class='line'>  virtual void DealJsonNode( string strNode, string value ){}
</span><span class='line'>
</span><span class='line'>  virtual void DealJsonNode( string strNode, int value ){}
</span><span class='line'>
</span><span class='line'>  virtual void DealJsonNode( string strNode, unsigned int value ){}
</span><span class='line'>
</span><span class='line'>  virtual void DealJsonNode( string strNode, double value ){}
</span><span class='line'>
</span><span class='line'>  virtual IParseJson* CreateJsonItem( string strKey );
</span><span class='line'>
</span><span class='line'>private:
</span><span class='line'>  virtual void PrintValueTree( Json::Value &value, IParseJson* pParent, IParseJson* pCurObj, const std::string strkey );
</span><span class='line'>
</span><span class='line'>};
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><code>PrintValueTree</code> 遍历json,在遍历中处理各自结点信息<br/>
<code>DealJsonNode</code> 在函数中,参数strNode是传递进来的结点名字,查找map对应的函数指针,进行赋值<br/>
<code>CreateJsonItem</code> 在函数中,参数strKey针对传递进来的结点名字,进行判断处理是否生成员变量对象.</p>

<p>IParseJson.cpp</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>
</span><span class='line'>#include &lt;algorithm&gt; // sort
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stddef.h&gt;
</span><span class='line'>#include &lt;sstream&gt;
</span><span class='line'>IParseJson* IParseJson::CreateJsonItem( string strKey )
</span><span class='line'>{
</span><span class='line'>    return this;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void IParseJson::PrintValueTree( Json::Value &value, IParseJson* pParent, IParseJson* pobj, const std::string strkey )
</span><span class='line'>{
</span><span class='line'>    IParseJson* pTmpJsonNode = NULL;
</span><span class='line'>    switch ( value.type() )
</span><span class='line'>    {
</span><span class='line'>        case Json::nullValue:
</span><span class='line'>            {
</span><span class='line'>                break;
</span><span class='line'>            }
</span><span class='line'>        case Json::intValue:
</span><span class='line'>            pobj-&gt;DealJsonNode( strkey, value.asInt() );
</span><span class='line'>            break;
</span><span class='line'>        case Json::uintValue:
</span><span class='line'>            pobj-&gt;DealJsonNode( strkey, value.asUInt() );
</span><span class='line'>            break;
</span><span class='line'>        case Json::realValue:
</span><span class='line'>            pobj-&gt;DealJsonNode( strkey, value.asDouble() );
</span><span class='line'>            break;
</span><span class='line'>        case Json::stringValue:
</span><span class='line'>            pobj-&gt;DealJsonNode( strkey, value.asString() );
</span><span class='line'>            break;
</span><span class='line'>        case Json::booleanValue:
</span><span class='line'>            pobj-&gt;DealJsonNode( strkey, value.asBool() );
</span><span class='line'>            break;
</span><span class='line'>        case Json::arrayValue:
</span><span class='line'>            {
</span><span class='line'>                int size = value.size();
</span><span class='line'>
</span><span class='line'>                for ( int index =0; index &lt; size; ++index )
</span><span class='line'>                {
</span><span class='line'>                    pTmpJsonNode = pParent-&gt;CreateJsonItem( strkey );
</span><span class='line'>                    PrintValueTree( value[index], pParent, pTmpJsonNode, strkey );
</span><span class='line'>                }
</span><span class='line'>
</span><span class='line'>            }
</span><span class='line'>            break;
</span><span class='line'>        case Json::objectValue:
</span><span class='line'>            {
</span><span class='line'>                Json::Value::Members members( value.getMemberNames() );
</span><span class='line'>                std::sort( members.begin(), members.end() );
</span><span class='line'>                std::string suffix = "";
</span><span class='line'>                for ( Json::Value::Members::iterator it = members.begin();
</span><span class='line'>                        it != members.end();
</span><span class='line'>                        ++it )
</span><span class='line'>                {
</span><span class='line'>                    const std::string &name = *it;
</span><span class='line'>
</span><span class='line'>                    PrintValueTree( value[name], pobj, pobj, name );
</span><span class='line'>
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>            break;
</span><span class='line'>        default:
</span><span class='line'>            break;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>BOOL IParseJson::ParseJson( const char* json )
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    Json::Features features;
</span><span class='line'>    Json::Reader reader( features );
</span><span class='line'>    Json::Value root;
</span><span class='line'>    bool parsingSuccessful = reader.parse( json, root );
</span><span class='line'>    if ( !parsingSuccessful )
</span><span class='line'>    {
</span><span class='line'>        return FALSE;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    PrintValueTree( root, this, this , "" );
</span><span class='line'>    return TRUE;
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>函数指针</h4>

<p>事先定义好函数,在各自函数中赋值对象值,用来遍历json时候,调用该函数,进行赋值<br/>
void Set_XXX( string strKey, void<em> value );<br/>
其中XXX为自定义的函数名称,取一个和json对象对应的名字, 例如: void Set_Name( string strKey, void</em> value );
代码修改成如下格式:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>class CStudentItem
</span><span class='line'>{
</span><span class='line'>private:
</span><span class='line'>    string m_name;
</span><span class='line'>    
</span><span class='line'>    int m_age;
</span><span class='line'>    
</span><span class='line'>    string sex;
</span><span class='line'>   
</span><span class='line'>    //设置函数指针
</span><span class='line'>    CStudentItem()
</span><span class='line'>    {
</span><span class='line'>        //设置结点对应的函数指针
</span><span class='line'>        m_jsonMethonMap["name"] = &CStudentItem::Set_Name;
</span><span class='line'>        m_jsonMethonMap["age"] = &CStudentItem::Set_Age;
</span><span class='line'>        m_jsonMethonMap["sex"] = &CStudentItem::Set_Sex;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    virtual ~CStudentItem(){}
</span><span class='line'>
</span><span class='line'>    typedef void ( CStudentItem::*StudentItemFunc )( string key, void* value );
</span><span class='line'>
</span><span class='line'>    typedef map&lt;string, StudentItemFunc&gt;JsonMethodMap;
</span><span class='line'>
</span><span class='line'>    JsonMethodMap m_jsonMethonMap;
</span><span class='line'>
</span><span class='line'>    void Set_Name( string strKey, void* value )
</span><span class='line'>    {
</span><span class='line'>        this-&gt;m_name = (char*)value;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    void Set_Age( string strKey, void* value )
</span><span class='line'>    {
</span><span class='line'>        this-&gt;m_age = atoi((char*)value));
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    void Set_Sex( string strKey, void* value )
</span><span class='line'>    {
</span><span class='line'>        this-&gt;m_sex = (char*)value;
</span><span class='line'>    }
</span><span class='line'>    //设置函数指针
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>class CStudents
</span><span class='line'>{
</span><span class='line'>private:
</span><span class='line'>    vector&lt;CStudentItem*&gt; m_StudentItemArr;
</span><span class='line'>};
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>现在实现了遍历Json,定义好函数指针后,怎么赋值?<br/>
我们让所有类都继承IParseJson, 实现DealJsonNode 函数,就可以实现对个类对象进行赋值<br/>
修改后的代码:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>class CStudentItem : public IParseJson
</span><span class='line'>{
</span><span class='line'>    public:
</span><span class='line'>        string m_name;
</span><span class='line'>
</span><span class='line'>        int m_age;
</span><span class='line'>
</span><span class='line'>        string m_sex;
</span><span class='line'>        //设置函数指针
</span><span class='line'>        CStudentItem()
</span><span class='line'>        {
</span><span class='line'>            //设置结点对应的函数指针
</span><span class='line'>            m_jsonMethodMap["name"] = &CStudentItem::Set_Name;
</span><span class='line'>            m_jsonMethodMap["age"] = &CStudentItem::Set_Age;
</span><span class='line'>            m_jsonMethodMap["sex"] = &CStudentItem::Set_Sex;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        virtual ~CStudentItem(){}
</span><span class='line'>
</span><span class='line'>        typedef void ( CStudentItem::*StudentItemFunc )( string key, void* value );
</span><span class='line'>
</span><span class='line'>        typedef map&lt;string, StudentItemFunc&gt;JsonMethodMap;
</span><span class='line'>
</span><span class='line'>        JsonMethodMap m_jsonMethodMap;
</span><span class='line'>
</span><span class='line'>        void Set_Name( string strKey, void* value )
</span><span class='line'>        {
</span><span class='line'>            this-&gt;m_name = (char*)value;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        void Set_Age( string strKey, void* value )
</span><span class='line'>        {
</span><span class='line'>            this-&gt;m_age = (intptr_t)value;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        void Set_Sex( string strKey, void* value )
</span><span class='line'>        {
</span><span class='line'>            this-&gt;m_sex = (char*)value;
</span><span class='line'>        }
</span><span class='line'>        //设置函数指针
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        //在map中找到对应的函数指针,对成员变量进行赋值
</span><span class='line'>        virtual void DealJsonNode( string strNode, string value )
</span><span class='line'>        {
</span><span class='line'>            JsonMethodMap::iterator Iter = m_jsonMethodMap.find( strNode );
</span><span class='line'>            if ( Iter != m_jsonMethodMap.end() )
</span><span class='line'>            {
</span><span class='line'>                (this-&gt;*m_jsonMethodMap[strNode])( strNode,  (void*)value.c_str() );
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        virtual void DealJsonNode( string strNode, int value )
</span><span class='line'>        {
</span><span class='line'>            JsonMethodMap::iterator Iter = m_jsonMethodMap.find( strNode );
</span><span class='line'>            if ( Iter != m_jsonMethodMap.end() )
</span><span class='line'>            {
</span><span class='line'>                (this-&gt;*m_jsonMethodMap[strNode])( strNode,  (void*)value );
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        //在map中找到对应的函数指针,对成员变量进行赋值
</span><span class='line'>
</span><span class='line'>        virtual IParseJson* CreateJsonItem( string strKey )
</span><span class='line'>        {
</span><span class='line'>            return this; //该类中没有一些数组,直接返回自身就好
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>};
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>调用</p>

<p>main.cpp</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;string&gt;
</span><span class='line'>using namespace std;
</span><span class='line'>
</span><span class='line'>#pragma comment(lib,"./jsoncpp/dbg/lib_json/json_vc10_libmtd.lib")
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>  string strJson = "{ \"students\": [ { \"name\": \"zhangsan\", \"age\": 20, \"sex\": \"男\" }, { \"name\": \"lisi\", \"age\": 21, \"sex\": \"女\" } ] }";
</span><span class='line'>  CStudents* pStudents = new CStudents;
</span><span class='line'>  pStudents-&gt;ParseJson( strJson.c_str() );
</span><span class='line'>  for( int i=0;i&lt;pStudents-&gt;m_StudentItemArr.size(); i++ )
</span><span class='line'>  {
</span><span class='line'>      CStudentItem* pStudentItem = pStudents-&gt;m_StudentItemArr.at(i);
</span><span class='line'>      printf("name:%s\r\nage:%d\r\nsex:%s\r\n-----\r\n",pStudentItem-&gt;m_name.c_str(),
</span><span class='line'>          pStudentItem-&gt;m_age,pStudentItem-&gt;m_sex.c_str() );
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>结果:</p>

<p><img src="http://charlessoft.github.io/../images/json_to_obj/1.png"></p>

<p>小结:</p>

<p>只要声明好各个类成员变量并设置好对应的函数,就可以把json字符串转换成对应的类对象,
每个类对象都需要定义JsonMethodMap来保存函数指针,对于少量的json字符串,还可以接受,如果json字符串比较多,并且包含多个json数组等,我们就需要声明多个类,并且每个类都需要处理JsonMethodMap,比较繁琐,而且容易出错.</p>

<p>如何解决这个问题?可以使用一些宏定义,类似MFC中的定义一些列宏的思想来解决. 下文介绍</p>

<p><a href="http://url.cn/KmkwHO">json2obj demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins_install]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/07/jenkins-install/"/>
    <updated>2014-05-07T11:57:41+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/07/jenkins-install</id>
    <content type="html"><![CDATA[<h1>可持续集成 Jenkins</h1>

<h2>目录</h2>

<ol>
<li>环境</li>
<li>软件<br/>
2.1. Jenkins<br/>
2.2. Subversion<br/>
2.3. Apache<br/>
2.4. Jdk6<br/>
2.5. Tomcat<br/>
2.6. Python Jenkins模块</li>
<li>安装步骤<br/>
3.1. Jdk 安装和配置<br/>
3.2. 安装 apache<br/>
3.3. 安装subversion<br/>
3.4. 安装maven<br/>
3.5. 安装tomcat<br/>
3.6. 安装jenkins  <br/>
3.7. 安装jenkins插件</li>
<li>配置<br/>
4.1. Linux slave  <br/>
4.2. windows slave</li>
<li>测试git 仓库</li>
<li>遇到问题以及解决

<h2>概述</h2></li>
</ol>


<!--more-->


<h2>安装手册</h2>

<h3>1. 环境</h3>

<p>ububtu 13.4</p>

<h3>2. 软件</h3>

<p>2.1. Jenkins<br/>
2.2. Subversion(可选)<br/>
2.3. Apache(可选)<br/>
2.4. Jdk6<br/>
2.5. Tomcat(可选)<br/>
2.6. Python Jenkins模块</p>

<h3>3. 安装步骤</h3>

<h4>3.1. Jdk 安装和配置</h4>

<p>下载jdk<br/>
jdk-6u38-ea-bin-b04-linux-i586-31_oct_2012.bin(x32)<br/>
jdk-6u38-ea-bin-b04-linux-amd64-31_oct_2012.bin(x64)<br/>
下载地址：<a href="https://jdk6.java.net/download.html  ">https://jdk6.java.net/download.html  </a>
进入到jdk存放目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>mkdir /usr/local/java
</span><span class='line'>mv ./jdk-6u38-ea-bin-b04-linux-i586-31_oct_2012.bin /usr/local/java
</span><span class='line'>cd /usr/local/java
</span><span class='line'>chmod 755 ./jdk-6u38-ea-bin-b04-linux-i586-31_oct_2012.bin
</span><span class='line'>./jdk-6u38-ea-bin-b04-linux-i586-31_oct_2012.bin
</span></code></pre></td></tr></table></div></figure>


<p>设置环境变量 vi /etc/profile</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>export JAVA_HOME=/usr/local/java/jdk1.6.0_38
</span><span class='line'>export JAVA_BIN=/usr/local/java/jdk1.6.0_38/bin
</span><span class='line'>export PATH=$PATH:$JAVA_HOME/bin
</span><span class='line'>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export JAVA_HOME JAVA_BIN PATH CLASSPATH
</span></code></pre></td></tr></table></div></figure>


<p>使 /etc/profile立即生效</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source /etc/profile
</span></code></pre></td></tr></table></div></figure>


<h4>3.2. 安装 apache</h4>

<p>3.2.1. 安装apr-1.3.6.tar.gz<br/>
下载地址：
<a href="https://archive.apache.org/dist/apr/apr-1.3.6.tar.gz">https://archive.apache.org/dist/apr/apr-1.3.6.tar.gz</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>tar zxvf apr-1.3.6.tar.gz
</span><span class='line'>cd apr-1.3.6
</span><span class='line'>./configure
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>3.2.1. 安装apr-util<br/>
下载地址:<a href="https://archive.apache.org/dist/apr/apr-util-1.3.8.tar.gz">https://archive.apache.org/dist/apr/apr-util-1.3.8.tar.gz</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>tar zxvf apr-util-1.3.8.tar.gz
</span><span class='line'>cd apr-util-1.3.8
</span><span class='line'>./configure --with-apr=/usr/local/apr
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>3.2.3. 安装apache<br/>
下载地址:<a href="http://pkgs.fedoraproject.org/repo/pkgs/httpd/httpd-2.2.9.tar.gz/80d3754fc278338">http://pkgs.fedoraproject.org/repo/pkgs/httpd/httpd-2.2.9.tar.gz/80d3754fc278338</a> 033296f0d41ef2c04/httpd-2.2.9.tar.gz</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>tar zxvf httpd-2.2.9.tar.gz
</span><span class='line'>cd http-2.2.9
</span><span class='line'>./configure --prefix=/usr/local/apache2.2.9 --enable-dav --enable-so --enable-maintainer-mode --with-apr=/usr/local/apr/bin/apr-1-config --with-apr-util=/usr/local/apr/bin/apu-1-config
</span><span class='line'>make
</span><span class='line'>make install
</span><span class='line'>ln -s apache2.2.9 apache
</span></code></pre></td></tr></table></div></figure>


<h4>3.3. 安装subversion</h4>

<p>下载地址:<a href="https://archive.apache.org/dist/subversion/subversion-1.8.5.tar.gz">https://archive.apache.org/dist/subversion/subversion-1.8.5.tar.gz</a></p>

<p>sqlite
<a href="http://jaist.dl.sourceforge.net/project/sqlite.mirror/SQLite%203.8.3.1/sqlite-amalgamation-3080301.zip">http://jaist.dl.sourceforge.net/project/sqlite.mirror/SQLite%203.8.3.1/sqlite-amalgamation-3080301.zip</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>apt-get install zlib1g-dev
</span><span class='line'>tar zxvf subversin-1.8.5.tar.gz
</span><span class='line'>unzip sqlite-amalgamation.zip -d subversion-1.8.5
</span><span class='line'>cd subversion-1.8.5
</span><span class='line'>mv sqlite-amalgmation-3071501 sqlite-amalgamation
</span><span class='line'>./configure --prefix=/opt/svn --with-apxs=/usr/local/apache2.2.9/bin/apxs --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>配置svn<br/>
建立svn版本库目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p /home/charles/svndata/repos
</span></code></pre></td></tr></table></div></figure>


<p>建立svn版本库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svnadmin create /home/charles/svndata/repos
</span></code></pre></td></tr></table></div></figure>


<p>修改配置文件
vi /home/charles/svndata/repos/conf/svnserve.conf<br/>
去掉 passwd-db = passwd 的注释</p>

<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_1.png"></p>

<p>修改 passwd 文件,增加用户和密码</p>

<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_2.png"></p>

<p>启动svn服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svnserve -d -r /home/charles/svndata/repos</span></code></pre></td></tr></table></div></figure>


<h4>3.4. 安装maven</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp apache-maven-3.2.1-bin.zip /usr/local cd /usr/local/
</span><span class='line'>unzip apache-maven-3.2.1-bin.zip
</span><span class='line'>ln -s apache-maven-3.2.1 apache-maven 配置环境变量
</span><span class='line'>vi /etc/profile
</span><span class='line'>export JAVA_HOME=/usr/local/ jdk1.6.0_38
</span><span class='line'>export JAVA_BIN=/usr/local/ jdk1.6.0_38/bin
</span><span class='line'>export M2_HOME=/usr/local/ apache-maven
</span><span class='line'>export PATH=$PATH:$JAVA_HOME/bin:$M2_HOME/bin
</span><span class='line'>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export JAVA_HOME JAVA_BIN PATH CLASSPATH</span></code></pre></td></tr></table></div></figure>


<p>立即生效配置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source /etc/profile</span></code></pre></td></tr></table></div></figure>


<h4>3.5. 安装tomcat</h4>

<p>下载地址:<a href="http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.52/bin/apache-tomcat-7.0.52.tar.gz">http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.52/bin/apache-tomcat-7.0.52.tar.gz</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp apache-tomcat-7.0.52.tar /usr/local/ tar zxvf apache-tomcat-7.0.52.tar
</span><span class='line'>ln -s apache-tomcat-7.0.52 apache-tomcat cd apache-tomcat/bin
</span><span class='line'>./startup.sh</span></code></pre></td></tr></table></div></figure>


<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_3.png"></p>

<p>打开web页面 <a href="http://localhost:8080">http://localhost:8080</a></p>

<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_4.png"></p>

<p>修改utf8编码
vi /etc/local/java/apache-tomcat-7.0.52/conf/server.xml</p>

<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_5.png"></p>

<h4>3.6. 安装jenkins</h4>

<p>下载地址:<a href="http://mirrors.jenkins-ci.org/war-stable/latest/jenkins.war">http://mirrors.jenkins-ci.org/war-stable/latest/jenkins.war</a></p>

<p>方法1:直接运行<br/>
java -jar jenkins.war</p>

<p>方法2:复制jenkins.war到/usr/local/apache-tomcat/webapps下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp jenkins.war /usr/local/apache-tomcat/webapps</span></code></pre></td></tr></table></div></figure>


<p>重启tomcat
打开url <a href="http://localhost:8080/jenkins">http://localhost:8080/jenkins</a></p>

<h4>3.7. 安装jenkins插件</h4>

<p>Publish Over SSH &mdash;>用来控制发布程序后执行脚本</p>

<h4>3.8. git 插件</h4>

<p>git 插件用于连接git 仓库. jenkins默认是不带git 插件,需要自行安装.
安装的git插件分别是:<br/>
<strong>scm-api</strong><br/>
<strong>git-client</strong><br/>
<strong>git</strong></p>

<h3>4. 配置</h3>

<h4>4.1. Linux slave</h4>

<p>4.1.1. 安装jdk(同 3.1 Jdk安装和配置)</p>

<p>4.1.2. 安装maven(同 3.4 安装maven)</p>

<p>4.1.3. 安装ssh服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /usr/sbin/useradd -m jenkins -d /home/Jenkins echo “jenkins:jenkins” | chpasswd
</span><span class='line'>su - jenkins 切换到 jenkins 用户
</span><span class='line'>java --version 确保 java 安装正确
</span><span class='line'>ssh-keygen 生成 ssh key 信息,按三次回车,表示把 key 存储在 /home/jenkins/.ssh/id_rsa 下,不设置密码
</span><span class='line'>cd .ssh
</span><span class='line'>cat id_rsa.pub &gt; authorized_keys
</span><span class='line'>chmod 700 authorized_keys
</span><span class='line'>将 id_rsa(相当于 privatekey)拷贝到 jenkins master 机器上,例如/root/.jenkins/id_rsa 下</span></code></pre></td></tr></table></div></figure>


<p>4.1.4 在jenkins页面增加slave
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_6.png"><br/>
增加证书<br/>
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_7.png"><br/>
设置 publish over ssh<br/>
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_8.png"></p>

<h4>4.2. windows slave</h4>

<p>4.2.1. 安装cygwin</p>

<p>选择安装ssh服务,cygwin默认是不安装OpenSSH的,需要手动选,在Netl类别下选上OpenSSH和OpenSSL两项
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_9.png"><br/>
等到下载完并完成安装,设置环境变量,把C:/cygwin/bin;C:/cygwin/usr/bin 加 入到系统环境变量的 Path 中</p>

<h3>5. 测试git 仓库</h3>

<p>例如代码库地址:test@114.114.114.114:/home/test/submd/repos/testProject.git</p>

<p>我们需要把登陆到114.114.114.114的账号增加到authorized_keys(免密码登陆,请百度),否则会更新不成功,会提示以下错误<br/>
tomcat 必须是该用户启动的,否则也会提示以下错误
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_10.png"><br/>
登陆到ci 服务器配置该工程信息
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_11.png"></p>

<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_12.png"></p>

<p>构建工程,可以看到输出的结果
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_13.png"></p>

<h3>6. 遇到问题以及解决</h3>

<h4>Q: slave /usr/bin/java does not found</h4>

<h4>A: slave中需要安装jdk,jenkins默认查找jdk的路径是/usr/bin/java,解决方法,设置ln链接, 在cygwin中输入以下命令</h4>

<pre><code>ln -s /cygdrive/c/Program\ Files\ \(x86\)/Java/jdk1.6.0_38/bin/java.exe /usr/bin/java
</code></pre>

<h4>Q: 在slave中经常遇到stderr:Host key verification failed.</h4>

<h4>A: 网上大部分是说把knows_keys删除掉,貌似没有效果.个人感觉最有效的方法.就是使用master中ssh到各个slave中,再ssh到代码仓库中,把id_rsa.pub增加到authorized_keys中(免密码登陆).</h4>

<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_14.png"></p>

<h4>Q: ssh 连接到slave时候,输入正确的账号密码,但经常遇到Permission denied 问题</h4>

<h4>A: 一种是由于authorized_keys 权限设置不对导致,设置authorized_keys 权限为644,一种由于账号没配置对导致,可以执行以下命令</h4>

<p><code>mkpasswd.exe -l &gt; /etc/pass</code></p>
]]></content>
  </entry>
  
</feed>
