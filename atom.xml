<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[学海拾贝 Blog]]></title>
  <link href="http://charlessoft.github.io/atom.xml" rel="self"/>
  <link href="http://charlessoft.github.io/"/>
  <updated>2014-10-11T15:33:58+08:00</updated>
  <id>http://charlessoft.github.io/</id>
  <author>
    <name><![CDATA[charlessoft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shell_code]]></title>
    <link href="http://charlessoft.github.io/blog/2014/10/03/shell-code/"/>
    <updated>2014-10-03T15:40:05+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/10/03/shell-code</id>
    <content type="html"><![CDATA[<h1>一些shell code</h1>

<p>shell判断文件,目录是否存在或者具有权限</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NovaPath=”/var/log/httpd/”
</span><span class='line'>NovaFile=”/var /log/httpd/access.log”
</span><span class='line'>
</span><span class='line'>#这里的-x 参数判断$NovaPath是否存在并且是否具有可执行权限
</span><span class='line'>if [ ! -x "$NovaPath"]; then
</span><span class='line'>    mkdir “$NovaPath”
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>#这里的-d 参数判断$NovaPath是否存在
</span><span class='line'>if [ ! -d "$NovaPath"]; then
</span><span class='line'>    mkdir “$NovaPath”
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>#这里的-f参数判断$NovaFile是否存在
</span><span class='line'>if [ ! -f "$NovaFile" ]; then
</span><span class='line'>    touch “$NovaFile”
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>#其他参数还有-n,-n是判断一个变量是否是否有值
</span><span class='line'>if [ ! -n "$NovaVar" ]; then
</span><span class='line'>    echo “$NovaVar is empty”
</span><span class='line'>    exit 0
</span><span class='line'>fi
</span><span class='line'>
</span><span class='line'>#两个变量判断是否相等
</span><span class='line'>if [ "$var1" = "$var2" ]; then
</span><span class='line'>    echo ‘$var1 eq $var2′
</span><span class='line'>else
</span><span class='line'>    echo ‘$var1 not eq $var2′
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>数字判断</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NUM=5
</span><span class='line'>DEFINE=10 
</span><span class='line'>if [ $NUM -ge $DEFINE ]; then \
</span><span class='line'>    echo $NUM
</span><span class='line'>else
</span><span class='line'>    echo $DEFINE 
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim_plugin]]></title>
    <link href="http://charlessoft.github.io/blog/2014/10/01/vim-plugin/"/>
    <updated>2014-10-01T22:48:02+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/10/01/vim-plugin</id>
    <content type="html"><![CDATA[<h1>vim plugin</h1>

<p>1.vim-expand-region
2.yankring
3.zencoding
4.ack
5.ctrlp
6.vim-markdown</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[架构师大会]]></title>
    <link href="http://charlessoft.github.io/blog/2014/09/28/jia-gou-shi-da-hui/"/>
    <updated>2014-09-28T15:10:48+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/09/28/jia-gou-shi-da-hui</id>
    <content type="html"><![CDATA[<p>概述<br/>
玩转自动化运维
体会</p>

<h2>概述</h2>

<p>有幸参加了2014年架构师大会，主题很丰富，演讲者从主流的技术上分享了各自的心得，
虽然之前在出差时也经常去参加一些免费的技术沙龙，这次的架构师大会，让我们屌丝程序员眼前一亮，见识到了什么是架构师盛宴。</p>

<h2>运维工具名词</h2>

<p>Pupplet<br/>
Chef<br/>
Ansible<br/>
Saltstack<br/>
系统工具<br/>
bash<br/>
awk<br/>
sed</p>

<h2>玩转自动化运维心得</h2>

<p>传统的几台服务器到几千台服务器，你还在一台一台的部署吗，那你就out了。。
在大数据时代，需要高效的程序员，一边喝咖啡，一边等待自动安装部署，而不是天天都在焦头烂额的敲重复的代码，
YUPUN公司的运维总监分享了他一些心得，介绍了常见的运维工具和系统自带的工具配合使用，公司只有4个运维，却能管理几千台机器，游刃有余， 面对临时需要修改一些策略需要重新发布，也完全木有问题。</p>

<p>以下结合前段时间做的自动化测试和自动化运维会议，分享一些自己体会
主要的体会就是能解放双手的，都让机器来解决。</p>

<p>1、像程序员一样思考问题
作为一名优秀运维工程师，需要了解多种语言，多种脚本，拒绝重复的劳动，创造性地解决问题，从而构建美妙的运维脚本。
自动化运维工程师，在每次登录多台服务器，做同样操作的时候，就应该考虑到能否编写小程序来解放双手，解放劳动力,而不是觉得远程登录敲下命令解决问题就放置不管了，
长期积累下来，苦逼的必须程序员自己啊~ , 重复的手工操作还容易产生错误，几千台机器有问题让你想死的心都有，机器能做的事情就应该让机器去做，教会机器做跟多低层次，机器比手工做的更好,节约运维人员时间学习更多的知识。</p>

<p><img src="http://charlessoft.github.io/../images/jiagoushidahui/01.png"></p>

<p>程序生成程序
对于一些修改配置，例如前段时间做的master/slave(一台服务器多台主机)关联，
以下是3种做法：</p>

<p><img src="http://charlessoft.github.io/../images/jiagoushidahui/02.png"></p>

<p>图1: 比较方便，对于新增加的机器，就直接在复制一个节点内容就直接可以运行了。</p>

<p><img src="http://charlessoft.github.io/../images/jiagoushidahui/03.png"></p>

<p>图2：对比图1，提取成函数，对于新增加的节点只要调用复制函数。</p>

<p><img src="http://charlessoft.github.io/../images/jiagoushidahui/04.png"></p>

<p>图3：对比图2，生成脚本程序，实际上是生成图2的内容，</p>

<blockquote><p>3种做法对比，<br/>
方法1：比较粗暴，比较容易完成任务，但是对于后期维护，需要做大量修改；<br/>
方法2：对方法1，提取函数，但是对于后期维护，例如一些slave已经执行过的脚本不需要执行，就需要做修改；<br/>
方法3：做法有时候比较繁琐，例如一些环境变量输出可能要走一些弯路，但是对于生成的脚本程序可以进行二次开发，有利维护。</p></blockquote>

<h2>监控状态图，性能可视化</h2>

<p>作为运维工程师，大部分时候会面对一些系统日志或者系统监控数据，如何快速从海量的数据中提取对我们有帮助数据，这就需要运维工程师会熟练系统的命令以及第三方工具，以图表的方式展示出来， 能直观的展示结果。</p>

<p>原始数据:</p>

<p><img src="http://charlessoft.github.io/../images/jiagoushidahui/05.png"></p>

<p>第三方程序加工后的展示图：</p>

<p><img src="http://charlessoft.github.io/../images/jiagoushidahui/06.png"></p>

<p>这样生成的结果清晰明了，对后期做数据展示图对比，就容易发现问题所在。</p>

<h2>结束</h2>

<p>不仅仅运维要自动化，在计算机能做的事情中，很多都可以自动化，自动化运维，自动化测试，自动化生成工具，
再完成自动化过程中，学习的道路是曲折的，涉及的方面也很广，网络、存储、系统、数据库、监控、安全、备份、排障、调优等 等我们学会。就会觉得俺们都是全栈工程师了。用福州话来说，叫牙霸</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FUSE]]></title>
    <link href="http://charlessoft.github.io/blog/2014/09/23/fuse/"/>
    <updated>2014-09-23T11:04:00+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/09/23/fuse</id>
    <content type="html"><![CDATA[<h2>目录</h2>

<ol>
<li>概述</li>
<li>FUSE模块</li>
<li>安装部署</li>
<li>demo
4.1 c/c++</li>
<li>参考资料<br/>
5.1 需要实现的函数列表<br/>
5.2 一些网站</li>
<li>基于FUSE系统
6.1 SSHFS</li>
</ol>


<h2>概述</h2>

<p>文件系统是一个通用操作系统重要的组成部分。传统的操作系统在内核层面上对文件系统提供支持，而通常内核态的代码难以调试，生产率较低。</p>

<p>用户空间文件系统（Filesystem in Userspace)，简称FUSE，指完全在用户态实现的文件系统FUSE简化了为操作系统提供新的文件系统的工作量，
特别适用于各种虚拟文件系统和网络文件系统。</p>

<p>Linux从2.6.14版本开始通过FUSE模块支持在用户空间实现文件系统。</p>

<p>本文主要介绍下fuse基础概念，以及介绍如何使用。</p>

<h2>FUSE模块</h2>

<p>FUSE是sourceforge 上开源项目，使用FUSE，用户不必熟悉Kernel代码，使用标准C库，FUSE库便可以设计自己需要的文件系统
FUSE由3个部分组成，FUSE内核模块，FUSE库以及一些挂载工具</p>

<p><img src="../images/fuse/fuse_1.png"></p>

<p>由图中可以看出 FUSE 与Ext3等文件系统同级，挂载了FUSE文件系统，就可以正常使用文件文件系统，例如执行ls、 cp等等命令</p>

<h2>安装部署</h2>

<p>FUSE安装比较简单，下载源码安装三步骤：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure 
</span><span class='line'>make 
</span><span class='line'>make install </span></code></pre></td></tr></table></div></figure>


<p>编译完成后就生成FUSE库并把库生成在系统目录中。</p>

<h2>demo</h2>

<p>FUSE库提供了2种API,一套简单些，一套相对更底层API,目前我也只使用简单的API接口，
FUSE 可以在 2.4.x 和 2.6.x 的内核上使用，现在可以支持 Java™ 绑定，不必限定于使用 C 和 C++ 来编写文件系统了。
使用FUSE库，直接上就需要实现系统函数，例如create,open,close原本系统帮你实现的函数，需要由你重写。</p>

<h3>c/c++</h3>

<p>该demo主要实现了挂载FUSE文件系统以后，执行ls，显示的目录列表， 默认的挂载点是/目录， 即使挂载成功后执行ls 会显示/目录下的内容
实现ls功能，需要实现getattr,readdir回调函数，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//需要实现的结构体回调指针</span>
</span><span class='line'><span class="k">static</span> <span class="k">struct</span> <span class="n">fuse_operations</span> <span class="n">xmp_oper</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">.</span><span class="n">init</span>       <span class="o">=</span> <span class="n">xmp_init</span><span class="p">,</span> <span class="c1">//初始化回调函数 </span>
</span><span class='line'>  <span class="p">.</span><span class="n">getattr</span>  <span class="o">=</span> <span class="n">xmp_getattr</span><span class="p">,</span> <span class="c1">//获取文件属性</span>
</span><span class='line'>  <span class="p">.</span><span class="n">readdir</span>  <span class="o">=</span> <span class="n">xmp_readdir</span><span class="p">,</span> <span class="c1">//读取目录 </span>
</span><span class='line'>    <span class="c1">//.create     = xmp_create, //创建文件</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="o">*</span><span class="n">xmp_init</span><span class="p">(</span><span class="k">struct</span> <span class="n">fuse_conn_info</span> <span class="o">*</span><span class="n">conn</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">BB_DATA</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">xmp_getattr</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span> <span class="k">struct</span> <span class="n">stat</span> <span class="o">*</span><span class="n">stbuf</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'>  <span class="n">res</span> <span class="o">=</span> <span class="n">lstat</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">stbuf</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="n">errno</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">xmp_readdir</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">path</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">buf</span><span class="p">,</span> <span class="n">fuse_fill_dir_t</span> <span class="n">filler</span><span class="p">,</span>
</span><span class='line'>             <span class="n">off_t</span> <span class="n">offset</span><span class="p">,</span> <span class="k">struct</span> <span class="n">fuse_file_info</span> <span class="o">*</span><span class="n">fi</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">DIR</span> <span class="o">*</span><span class="n">dp</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">dirent</span> <span class="o">*</span><span class="n">de</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">offset</span><span class="p">;</span>
</span><span class='line'>  <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">fi</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">dp</span> <span class="o">=</span> <span class="n">opendir</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dp</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="n">errno</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">((</span><span class="n">de</span> <span class="o">=</span> <span class="n">readdir</span><span class="p">(</span><span class="n">dp</span><span class="p">))</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">stat</span> <span class="n">st</span><span class="p">;</span>
</span><span class='line'>      <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">st</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">st</span><span class="p">));</span>
</span><span class='line'>      <span class="n">st</span><span class="p">.</span><span class="n">st_ino</span> <span class="o">=</span> <span class="n">de</span><span class="o">-&gt;</span><span class="n">d_ino</span><span class="p">;</span>
</span><span class='line'>      <span class="n">st</span><span class="p">.</span><span class="n">st_mode</span> <span class="o">=</span> <span class="n">de</span><span class="o">-&gt;</span><span class="n">d_type</span> <span class="o">&lt;&lt;</span> <span class="mi">12</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">filler</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="n">de</span><span class="o">-&gt;</span><span class="n">d_name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">st</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">closedir</span><span class="p">(</span><span class="n">dp</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">umask</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">fuse_main</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">xmp_oper</span><span class="p">,</span> <span class="n">bb_data</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//编译命令</span>
</span><span class='line'><span class="n">gcc</span> <span class="o">-</span><span class="n">g</span> <span class="o">-</span><span class="n">o</span> <span class="n">main</span> <span class="p">.</span><span class="o">/</span><span class="n">mmm</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">D_FILE_OFFSET_BITS</span><span class="o">=</span><span class="mi">64</span>  <span class="err">`</span><span class="n">pkg</span><span class="o">-</span><span class="n">config</span> <span class="o">--</span><span class="n">libs</span> <span class="n">fuse</span><span class="err">`</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//挂载目录 </span>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">main</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">mnt</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过使用mount命令可以看到挂载点信息</p>

<p><img src="../images/fuse/fuse_2.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//ls命令 </span>
</span><span class='line'><span class="n">ls</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">mnt</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="../images/fuse/fuse_3.png"></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">//卸载/tmp/mnt</span>
</span><span class='line'><span class="n">fusemount</span> <span class="o">-</span><span class="n">u</span> <span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">mnt</span>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>参考资料<br/>
5.1 需要实现的函数列表<br/>
<a href="http://fuse.sourceforge.net/doxygen/structfuse__operations.html">http://fuse.sourceforge.net/doxygen/structfuse__operations.html</a></li>
</ol>


<p>5.2 一些网站<br/>
fuse官网<br/>
<a href="http://fuse.sourceforge.net/">http://fuse.sourceforge.net/</a></p>

<p>fuse hello world  <br/>
<a href="http://ouonline.net/create-your-own-fs-with-fuse-1">http://ouonline.net/create-your-own-fs-with-fuse-1</a></p>

<p><a href="http://ouonline.net/create-your-own-fs-with-fuse-2">http://ouonline.net/create-your-own-fs-with-fuse-2</a></p>

<ol>
<li>基于FUSE系统<br/>
6.1 SSHFS<br/>
通过使用SSH协议，挂载远程文件系统，挂载成功后，就可以像操作本地文件一样操作远程目录。</li>
</ol>


<p>结束<br/>
文本简单叙述了如何使用FUSE搭建一个文件系统，</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jmeter]]></title>
    <link href="http://charlessoft.github.io/blog/2014/09/22/jmeter/"/>
    <updated>2014-09-22T15:09:30+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/09/22/jmeter</id>
    <content type="html"><![CDATA[<h1>目录</h1>

<ol>
<li>概述</li>
<li>jmeter 安装</li>
<li>jmeter 使用</li>
<li>jmeter 在持续集成中使用</li>
<li>分布式jemter</li>
<li>总结</li>
<li></li>
</ol>


<h2>概述</h2>

<p>jmeter 用来做测试, 本文介绍了jmeter用途以及jmeter使用</p>

<h3>jmeter 安装步骤</h3>

<p>jmeter安装步骤相对简单,</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git远程分支]]></title>
    <link href="http://charlessoft.github.io/blog/2014/07/01/gityuan-cheng-fen-zhi/"/>
    <updated>2014-07-01T23:10:10+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/07/01/gityuan-cheng-fen-zhi</id>
    <content type="html"><![CDATA[<h1>git 远程分支命令</h1>

<p>git 版本控制管理工具,比较强大,刚开始用的时候感觉不适应,特别是很多命令行,分支等等,感觉和svn比起来,还是svn用的比较舒服,但是用久了git,就会发觉git的强大,git采用分布式版本库做法,不需要服务器端软件,只要安装了git本地就可以运作版本控制,网上有很多git和svn对比,这里就不列举了,这里只列一下自己感受比svn好的地方.</p>

<p>1.随时提交代码到本地版本库,特别适合没网络的环境.<br/>
2.git 切换分支很方便,个人感觉比svn强大很多.<br/>
git 可以在同一个目录下随时切换分支,svn(好像不行).</p>

<p>以下列举下git一些分支命令<br/>
<code>git checkout -b dev1</code> &mdash;>新生成分支并且切换到dev1分支<br/>
<code>git push origin dev1</code> &mdash;>上传到远程分支<br/>
<code>git checkout -b dev1 origin/dev1</code> &mdash;>下载远程分支</p>

<p>git 常用命令<br/>
<code>git init</code> &mdash;>初始化版本库<br/>
<code>git add -u</code> &mdash;>增加更新的文件到版本中<br/>
<code>git commit -m "log 内容"</code> &mdash;>提交到版本库<br/>
<code>git push origin master</code> &mdash;>更新到远程主干中<br/>
<code>git reset --hard commit_id</code> &mdash;>彻底回退到某个版本，本地的源码也会变为上一个版本的内容  <br/>
<code>git reset --mixed commit_id</code> &mdash;>回退到指定的commit_id,保留修改后的源码,可以使用<code>git add -u</code>和<code>git commit -m"xxx"</code>提交到版本库<br/>
<code>git reset --soft commit_id</code> &mdash;>会退到指定的commit_id,只回退了commit信息,可以使用<code>git commit -m"xxx"</code>再次提交<br/>
<code>强制提交到远程版本库</code>&ndash;>有时候需要删除远程版本库中前几次提交,可以使用命令<br/>
<code>git reset --hard commit_id</code>然后使用<code>git push origin HEAD --force</code><br/>
<code>git tag v0.1</code>&ndash;>打标签,push 到远程上需要用<code>git push origin tag v0.1</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux_lock_package]]></title>
    <link href="http://charlessoft.github.io/blog/2014/06/30/linux-lock-package/"/>
    <updated>2014-06-30T00:58:59+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/06/30/linux-lock-package</id>
    <content type="html"><![CDATA[<h1>读写锁,互斥锁封装</h1>

<p>炼数成金的课程中把互斥锁和读写锁封装了一个类,一起分享下,适用windows/linux,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#ifndef OSSLATCH_HPP__
</span><span class='line'>#define OSSLATCH_HPP__
</span><span class='line'>
</span><span class='line'>#include "core.hpp"
</span><span class='line'>
</span><span class='line'>#ifdef _WINDOWS
</span><span class='line'>#define oss_mutex_t                       CRITICAL_SECTION
</span><span class='line'>#define oss_mutex_init(__lock, __attribute)       InitializeCriticalSection( (__lock) )
</span><span class='line'>#define oss_mutex_destroy             DeleteCriticalSection
</span><span class='line'>#define oss_mutex_lock                    EnterCriticalSection
</span><span class='line'>#define oss_mutex_trylock(__lock)     (TRUE == TryEnterCriticalSection( (__lock) ) )
</span><span class='line'>#define oss_mutex_unlock              LeaveCriticalSection
</span><span class='line'>
</span><span class='line'>#define oss_rwlock_t                  SRWLOCK
</span><span class='line'>#define oss_rwlock_init(__lock, __attribute)      InitializeSRWLock( (__lock) )
</span><span class='line'>#define oss_rwlock_destroy(__lock)        (1) 
</span><span class='line'>#define oss_rwlock_rdlock             AcquireSRWLockShared
</span><span class='line'>#define oss_rwlock_rdunlock               ReleaseSRWLockShared
</span><span class='line'>#define oss_rwlock_wrlock             AcquireSRWLockExclusive
</span><span class='line'>#define oss_rwlock_wrunlock               ReleaseSRWLockExclusive
</span><span class='line'>#define oss_rwlock_rdtrylock(__lock)  (false)
</span><span class='line'>#define oss_rwlock_wrtrylock(__lock)  (false)
</span><span class='line'>
</span><span class='line'>#else
</span><span class='line'>
</span><span class='line'>#define oss_mutex_t                       pthread_mutex_t
</span><span class='line'>#define oss_mutex_init                    pthread_mutex_init
</span><span class='line'>#define oss_mutex_destroy             pthread_mutex_destroy
</span><span class='line'>#define oss_mutex_lock                    pthread_mutex_lock
</span><span class='line'>#define oss_mutex_trylock(__lock) (pthread_mutex_trylock( (__lock) ) == 0 )
</span><span class='line'>#define oss_mutex_unlock              pthread_mutex_unlock
</span><span class='line'>
</span><span class='line'>#define oss_rwlock_t                  pthread_rwlock_t
</span><span class='line'>#define oss_rwlock_init                   pthread_rwlock_init
</span><span class='line'>#define oss_rwlock_destroy                pthread_rwlock_destroy
</span><span class='line'>#define oss_rwlock_rdlock             pthread_rwlock_rdlock
</span><span class='line'>#define oss_rwlock_rdunlock               pthread_rwlock_unlock
</span><span class='line'>#define oss_rwlock_wrlock             pthread_rwlock_wrlock
</span><span class='line'>#define oss_rwlock_wrunlock               pthread_rwlock_unlock
</span><span class='line'>#define oss_rwlock_rdtrylock(__lock)  (pthread_rwlock_tryrdlock( (__lock) ) == 0 )
</span><span class='line'>#define oss_rwlock_wrtrylock(__lock)  (pthread_rwlock_trywrlock ( ( __lock) ) == 0 )
</span><span class='line'>
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>enum OSS_LATCH_MODE
</span><span class='line'>{
</span><span class='line'>   SHARED ,
</span><span class='line'>   EXCLUSIVE
</span><span class='line'>} ;
</span><span class='line'>
</span><span class='line'>class ossXLatch
</span><span class='line'>{
</span><span class='line'>private :
</span><span class='line'>   oss_mutex_t _lock ;
</span><span class='line'>public :
</span><span class='line'>   ossXLatch ()
</span><span class='line'>   {
</span><span class='line'>      oss_mutex_init ( &_lock, 0 ) ;
</span><span class='line'>   }
</span><span class='line'>   ~ossXLatch ()
</span><span class='line'>   {
</span><span class='line'>      oss_mutex_destroy(&_lock);
</span><span class='line'>   }
</span><span class='line'>   void get ()
</span><span class='line'>   {
</span><span class='line'>      oss_mutex_lock(&_lock);
</span><span class='line'>   }
</span><span class='line'>   void release ()
</span><span class='line'>   {
</span><span class='line'>      oss_mutex_unlock(&_lock);
</span><span class='line'>   }
</span><span class='line'>   bool try_get ()
</span><span class='line'>   {
</span><span class='line'>      return oss_mutex_trylock(&_lock);
</span><span class='line'>   }
</span><span class='line'>} ;
</span><span class='line'>
</span><span class='line'>class ossSLatch
</span><span class='line'>{
</span><span class='line'>private :
</span><span class='line'>   oss_rwlock_t _lock ;
</span><span class='line'>public :
</span><span class='line'>   ossSLatch ()
</span><span class='line'>   {
</span><span class='line'>      oss_rwlock_init ( &_lock, 0 ) ;
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   ~ossSLatch ()
</span><span class='line'>   {
</span><span class='line'>      oss_rwlock_destroy ( &_lock ) ;
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   void get ()
</span><span class='line'>   {
</span><span class='line'>      oss_rwlock_wrlock ( &_lock ) ;
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   void release ()
</span><span class='line'>   {
</span><span class='line'>      oss_rwlock_wrunlock ( &_lock ) ;
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   bool try_get ()
</span><span class='line'>   {
</span><span class='line'>      return ( oss_rwlock_wrtrylock ( &_lock ) ) ;
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   void get_shared ()
</span><span class='line'>   {
</span><span class='line'>      oss_rwlock_rdlock ( &_lock ) ;
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   void release_shared ()
</span><span class='line'>   {
</span><span class='line'>      oss_rwlock_rdunlock ( &_lock ) ;
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   bool try_get_shared ()
</span><span class='line'>   {
</span><span class='line'>      return ( oss_rwlock_rdtrylock ( &_lock ) ) ;
</span><span class='line'>   }
</span><span class='line'>} ;
</span><span class='line'>
</span><span class='line'>#endif</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//调用
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include "ossLatch.hpp"
</span><span class='line'>#include   &lt;unistd.h&gt;
</span><span class='line'>ossXLatch Mutex_lock;
</span><span class='line'>ossSLatch Shared_lock;
</span><span class='line'>pthread_t id;
</span><span class='line'>pthread_t id1;
</span><span class='line'>
</span><span class='line'>void ReadLog( void *ptr )
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    unsigned int pid = (unsigned int )ptr;
</span><span class='line'>    printf("Thread %u lock--\n",pid);
</span><span class='line'>    FILE* fp = fopen("log.txt","rb");
</span><span class='line'>    if(fp)
</span><span class='line'>    {
</span><span class='line'>        fseek(fp,0,SEEK_END);
</span><span class='line'>        int nlen = ftell(fp);
</span><span class='line'>        fseek(fp,0,SEEK_SET);
</span><span class='line'>        char* pData = new char[nlen+1];
</span><span class='line'>        memset(pData,0,nlen+1);
</span><span class='line'>        fread(pData,1,nlen,fp);
</span><span class='line'>        fclose(fp);
</span><span class='line'>        printf("%s",pData);
</span><span class='line'>        delete [] pData;
</span><span class='line'>    }
</span><span class='line'>    sleep(2);
</span><span class='line'>    printf("Thread %u unlock--\n",pid);
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>void *rd_lock_thread( void* ptr )
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    Shared_lock.get_shared();
</span><span class='line'>    printf("读锁,其他线程才可以进入\n");
</span><span class='line'>    ReadLog( ptr );
</span><span class='line'>    Shared_lock.release();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void *rw_lock_thread( void* ptr )
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    Shared_lock.get();
</span><span class='line'>    printf("写锁,只有该线程解锁 %u ,其他线程才可以进入\n",(unsigned int ) ptr );
</span><span class='line'>    ReadLog( ptr );
</span><span class='line'>    Shared_lock.release();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void *mutex_thread(void *ptr)
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    Mutex_lock.get();
</span><span class='line'>    printf("只有当 Thread %u 解锁,其他线程才可以进入--\n",(unsigned int ) ptr);
</span><span class='line'>    ReadLog( ptr );
</span><span class='line'>    Mutex_lock.release();
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>int main(int argc, const char *argv[])
</span><span class='line'>{
</span><span class='line'>    int i,ret;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    printf("演示:mutex-互斥锁--\n");
</span><span class='line'>    ret=pthread_create(&id,NULL,mutex_thread,(void*)1);
</span><span class='line'>    ret=pthread_create(&id1,NULL,mutex_thread,(void*)2);
</span><span class='line'>    pthread_join(id,NULL);
</span><span class='line'>    pthread_join(id1,NULL);
</span><span class='line'>    printf("-------------------------------------\n\n");
</span><span class='line'>
</span><span class='line'>    printf("演示:读写锁--读锁--\n");
</span><span class='line'>    ret=pthread_create(&id,NULL,rd_lock_thread,(void*)1);
</span><span class='line'>    ret=pthread_create(&id1,NULL,rd_lock_thread,(void*)2);
</span><span class='line'>    pthread_join(id,NULL);
</span><span class='line'>    pthread_join(id1,NULL);
</span><span class='line'>
</span><span class='line'>    printf("-------------------------------------\n\n");
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    printf("演示:读写锁--写锁--\n");
</span><span class='line'>    ret=pthread_create(&id,NULL,rw_lock_thread,(void*)1);
</span><span class='line'>    ret=pthread_create(&id1,NULL,rw_lock_thread,(void*)2);
</span><span class='line'>    pthread_join(id,NULL);
</span><span class='line'>    pthread_join(id1,NULL);
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux_lock]]></title>
    <link href="http://charlessoft.github.io/blog/2014/06/29/linux-lock/"/>
    <updated>2014-06-29T23:49:52+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/06/29/linux-lock</id>
    <content type="html"><![CDATA[<h1>Linux下互斥锁,读写锁区别</h1>

<h2>目录</h2>

<p>1.互斥锁<br/>
2.读写锁</p>

<p>互斥锁 实现多个线程之间的同步,互斥锁主要函数<br/>
1.pthread_mutex_init &ndash;>初始化 <br/>
2.pthread_mutex_destroy &mdash;>销毁 <br/>
3.pthread_mutex_lock &mdash;>加锁<br/>
4.pthread_mutex_unlock &mdash;>解锁</p>

<p><code>读写锁</code> 比mutex有更高的适用性，可以多个线程同时占用读模式的读写锁，但是只能一个线程占用写模式的读写锁。<br/>
当读写锁是读加锁状态,所有以读模式对它进行加锁的线程都可以获得到访问权,但是以写模式对它加锁的线程将阻塞<br/>
当读写锁是写加锁状态,所以对该资源进行操作的线程都会阻塞,直到该锁解锁.<br/>
读写锁函数<br/>
1.pthread_rwlock_init &mdash;>初始化<br/>
2.pthread_rwlock_destroy &mdash;>销毁<br/>
3.pthread_rwlock_rdlock &mdash;>读锁定<br/>
4.pthread_rwlock_unlock &mdash;>解锁,写锁定的解锁也是调用该函数<br/>
5.pthread_rwlock_rwlock &mdash;>写锁定 <br/>
6.pthread_rwlock_tryrdlock &mdash;>尝试是否能获得到读锁<br/>
7.pthread_rwlock_trywrlock &mdash;>尝试是否能获得到写锁</p>

<p>以下是测试的例子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;string.h&gt;
</span><span class='line'>#include &lt;unistd.h&gt;
</span><span class='line'>pthread_t id;
</span><span class='line'>pthread_t id1;
</span><span class='line'>pthread_rwlock_t _lock;
</span><span class='line'>pthread_mutex_t mutex;
</span><span class='line'>void ReadLog( void *ptr )
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    unsigned int pid = (unsigned int )ptr;
</span><span class='line'>    printf("Thread %u lock--\n",pid);
</span><span class='line'>    FILE* fp = fopen("log.txt","rb");
</span><span class='line'>    if(fp)
</span><span class='line'>    {
</span><span class='line'>        fseek(fp,0,SEEK_END);
</span><span class='line'>        int nlen = ftell(fp);
</span><span class='line'>        fseek(fp,0,SEEK_SET);
</span><span class='line'>        char* pData = new char[nlen+1];
</span><span class='line'>        memset(pData,0,nlen+1);
</span><span class='line'>        fread(pData,1,nlen,fp);
</span><span class='line'>        fclose(fp);
</span><span class='line'>        printf("%s",pData);
</span><span class='line'>        delete [] pData;
</span><span class='line'>    }
</span><span class='line'>    sleep(2);
</span><span class='line'>    printf("Thread %u unlock--\n",pid);
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>void *rd_lock_thread( void* ptr )
</span><span class='line'>{
</span><span class='line'>    pthread_rwlock_rdlock( &_lock );
</span><span class='line'>    printf("读锁,其他线程才可以进入\n");
</span><span class='line'>    ReadLog( ptr );
</span><span class='line'>    pthread_rwlock_unlock( &_lock );
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void *rw_lock_thread( void* ptr )
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    pthread_rwlock_wrlock( &_lock );
</span><span class='line'>    printf("写锁,只有该线程解锁 %u ,其他线程才可以进入\n",(unsigned int ) ptr );
</span><span class='line'>    ReadLog( ptr );
</span><span class='line'>    pthread_rwlock_unlock( &_lock );
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void *mutex_thread(void *ptr)
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    pthread_mutex_lock(&mutex);
</span><span class='line'>    printf("只有当 Thread %u 解锁,其他线程才可以进入--\n",(unsigned int ) ptr);
</span><span class='line'>    ReadLog( ptr );
</span><span class='line'>    pthread_mutex_unlock(&mutex);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>int main(int argc, const char *argv[])
</span><span class='line'>{
</span><span class='line'>    int i,ret;
</span><span class='line'>    printf("演示:mutex-互斥锁--\n");
</span><span class='line'>    pthread_mutex_init( &mutex, NULL );
</span><span class='line'>    ret=pthread_create(&id,NULL,mutex_thread,(void*)1);
</span><span class='line'>    ret=pthread_create(&id1,NULL,mutex_thread,(void*)2);
</span><span class='line'>    pthread_join(id,NULL);
</span><span class='line'>    pthread_join(id1,NULL);
</span><span class='line'>    pthread_mutex_destroy( &mutex );
</span><span class='line'>    printf("-------------------------------------\n\n");
</span><span class='line'>
</span><span class='line'>    printf("演示:读写锁--读锁--\n");
</span><span class='line'>    pthread_rwlock_init(&_lock,0);
</span><span class='line'>    ret=pthread_create(&id,NULL,rd_lock_thread,(void*)1);
</span><span class='line'>    ret=pthread_create(&id1,NULL,rd_lock_thread,(void*)2);
</span><span class='line'>    pthread_join(id,NULL);
</span><span class='line'>    pthread_join(id1,NULL);
</span><span class='line'>    pthread_rwlock_destroy(&_lock);
</span><span class='line'>    printf("-------------------------------------\n\n");
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    printf("演示:读写锁--写锁--\n");
</span><span class='line'>    pthread_rwlock_init(&_lock,0);
</span><span class='line'>    ret=pthread_create(&id,NULL,rw_lock_thread,(void*)1);
</span><span class='line'>    ret=pthread_create(&id1,NULL,rw_lock_thread,(void*)2);
</span><span class='line'>    pthread_join(id,NULL);
</span><span class='line'>    pthread_join(id1,NULL);
</span><span class='line'>    pthread_rwlock_destroy(&_lock);
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><img src="http://charlessoft.github.io/../images/linux_lock/linux_lock_pic_1.png"><br/>
<img src="http://charlessoft.github.io/../images/linux_lock/linux_lock_pic_2.png"><br/>
<img src="http://charlessoft.github.io/../images/linux_lock/linux_lock_pic_3.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins_plugin_邮件通知]]></title>
    <link href="http://charlessoft.github.io/blog/2014/06/03/jenkins-plugin-email-ext/"/>
    <updated>2014-06-03T00:05:29+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/06/03/jenkins-plugin-email-ext</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>使用jenkins持续编译程序后,可以发送编译的结果给特定的人员,以便邮件方式告知编译或测试结果
jenkins 默认有自带了邮件通知功能,但是使用起来不是很方便,本文使用Email-ext plugin进行发送邮件</p>

<h2>插件名称:</h2>

<p><strong>Email-ext plugin</strong></p>

<p>如果手工安装插件还需要安装 Token macro Plugin</p>

<p>安装好插件后在jenkins->系统管理->系统配置里头就会看到<code>Extended E-email Notification</code>选项
设置以下选项.就可以发送邮件</p>

<p><img src="http://charlessoft.github.io/../images/jenkins_plugin_email/jenkins_plugin_email_pic_1.png"></p>

<h2>使用插件</h2>

<p>在项目配置中选择<code>增加构建后操作步骤</code>&ndash;><code>E-email Notification</code>
<img src="http://charlessoft.github.io/../images/jenkins_plugin_email/jenkins_plugin_email_pic_2.png">
当项目编译后.就会发送邮件到指定的用户</p>

<h2>指定邮件模板</h2>

<p>&#8220;`</p>

<p>&#8220;`</p>

<p>对邮件中字段详细说明待续再更新&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorized_keys权限导致登陆失败问题]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/25/ssh-authorized-keysmian-mi-ma-shi-bai-wen-ti/"/>
    <updated>2014-05-25T13:34:22+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/25/ssh-authorized-keysmian-mi-ma-shi-bai-wen-ti</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>authorized_keys 是将用户的公钥,保存在登陆$HOME/.ssh/authorized_keys,公钥是一段字符串,只要把它追加在authorized_keys文件的末尾就行了,下次用户可以免密码登陆.</p>

<p>经过测试免密码登陆<code>CentOs Linux 6.5 X64位</code>系统与<code>authorized_keys</code>文件权限有关系</p>

<p><img src="http://charlessoft.github.io/../images/ssh_authorized/ssh_authorized_key_1.png"><br/>
有上图看出authorized_keys 权限是<code>-rw-rw-r-</code>
即使把客户端的id_rsa.pub 保存到服务器的authorized_keys上也连接不了,需要把属性修改成<code>-rw-r--r--</code>或者<code>-rw------</code></p>

<p>修改命令:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod 644 authorized_keys
</span><span class='line'>或
</span><span class='line'>chmod 600 authorized_keys</span></code></pre></td></tr></table></div></figure>


<p><img src="http://charlessoft.github.io/../images/ssh_authorized/ssh_authorized_key_2.png"><br/>
这样就可以连接上</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 批量增加用户]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/20/linux-pi-liang-zeng-jia-yong-hu/"/>
    <updated>2014-05-20T23:10:05+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/20/linux-pi-liang-zeng-jia-yong-hu</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>linux下经常需要增加用户进行执行脚本,下文介绍使用shell脚本增加用户,可以实现批量增加用户.</p>

<!--more-->


<h2>步骤</h2>

<h3>相关命令</h3>

<ol>
<li>newusers &mdash;新建用户</li>
<li>chpasswd &mdash;修改用户密码</li>
</ol>


<p>建立一个和/etc/passwd 一样的文本内容userlist.txt</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ubuntu00:x:520:520::/home/ubuntu00:/bin/bash
</span><span class='line'>ubuntu01:x:521:521::/home/ubuntu01:/bin/bash
</span><span class='line'>ubuntu02:x:522:522::/home/ubuntu02:/bin/bash
</span><span class='line'>ubuntu03:x:523:523::/home/ubuntu03:/bin/bash
</span><span class='line'>ubuntu04:x:524:524::/home/ubuntu04:/bin/bash
</span><span class='line'>ubuntu05:x:525:525::/home/ubuntu05:/bin/bash
</span><span class='line'>ubuntu06:x:526:526::/home/ubuntu06:/bin/bash
</span><span class='line'>ubuntu07:x:527:527::/home/ubuntu07:/bin/bash
</span><span class='line'>ubuntu08:x:528:528::/home/ubuntu08:/bin/bash
</span><span class='line'>ubuntu09:x:529:529::/home/ubuntu09:/bin/bash
</span></code></pre></td></tr></table></div></figure>


<p>建立一个password.txt 文件,保存用户名对应的密码,格式如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ubuntu00:123456
</span><span class='line'>ubuntu01:123456
</span><span class='line'>ubuntu02:123456
</span><span class='line'>ubuntu03:123456
</span><span class='line'>ubuntu04:123456
</span><span class='line'>ubuntu05:123456
</span><span class='line'>ubuntu06:123456
</span><span class='line'>ubuntu07:123456
</span><span class='line'>ubuntu08:123456
</span><span class='line'>ubuntu09:123456</span></code></pre></td></tr></table></div></figure>


<h3>使用命令</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>newusers userlist.txt
</span><span class='line'>chpasswd &lt; password.txt</span></code></pre></td></tr></table></div></figure>


<p>就添加完成了,su &ndash; ubuntu00 输入密码123456,就切换到该用户下,可以输入bash,使用bash.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[V8 Engine编译]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/10/v8-enginebian-yi/"/>
    <updated>2014-05-10T15:32:28+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/10/v8-enginebian-yi</id>
    <content type="html"><![CDATA[<h1>概述</h1>

<p>V8 Engine 用来编译javascript, chrome浏览器就是使用该引擎,V8 引擎是独立的模块,可以直接嵌入到程序中执行js脚本</p>

<!--more-->


<h2>windows 编译</h2>

<h3>1. 工具</h3>

<blockquote><p>V8</p>

<p>svn checkout <a href="http://v8.googlecode.com/svn/branches/bleeding_edge/">http://v8.googlecode.com/svn/branches/bleeding_edge/</a> v8</p>

<p>python</p>

<p>svn co <a href="http://src.chromium.org/svn/trunk/tools/thirdparty/python26@89111">http://src.chromium.org/svn/trunk/tools/thirdparty/python26@89111</a> thirdparty/python26</p>

<p>cygwin</p>

<p>svn co <a href="http://src.chromium.org/svn/trunk/deps/thirdparty/cygwin@231940">http://src.chromium.org/svn/trunk/deps/thirdparty/cygwin@231940</a> thirdparty/cygwin</p>

<p>icu</p>

<p>svn co <a href="https://src.chromium.org/chrome/trunk/deps/thirdparty/icu46">https://src.chromium.org/chrome/trunk/deps/thirdparty/icu46</a> thirdparty/icu</p>

<p>gyp</p>

<p>svn co <a href="http://gyp.googlecode.com/svn/trunk">http://gyp.googlecode.com/svn/trunk</a> build/gyp</p></blockquote>

<h3>2. 编译步骤</h3>

<blockquote><p>把下载后的third_party拷贝到v8目录下,设置python的环境变量,方便直接调用python命令</p>

<p>cd 到v8目录下,执行命令python build\gyp_v8 生成工程文件</p>

<p>&ldquo;c:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\devenv.com&rdquo; /build Release build\All.sln</p></blockquote>

<h3>3. 调试步骤</h3>

<blockquote><p>使用vs2010打开All.sln编译好的工程,
可以进行调试,设置启动项为 sample/shell,运行shell print(&lsquo;hello world!&rsquo;);</p></blockquote>

<h3>4. 参考资料</h3>

<blockquote><p><a href="http://blog.chinaunix.net/uid-8272118-id-2033359.html">关于V8 JavaScript Engine的使用方法研究(一)</a></p>

<p><a href="http://www.cppblog.com/weiym/archive/2012/05/19/175374.html">如何在程序中嵌入google的V8 Javascript引擎</a></p>

<p><a href="http://blog.csdn.net/zengraoli/article/details/9178219">编译v8引擎</a></p>

<p><a href="https://code.google.com/p/v8/wiki/BuildingWithGYP">BuildingWithGYP</a></p>

<p><a href="http://hi.baidu.com/hycjk/item/f137d2e5616e64b52f140bd7">V8系列——内存管理(1)</a></p>

<p><a href="http://hi.baidu.com/hycjk/item/c79470d1f35fac95260ae7da">V8系列——内存管理</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把json字符串转换成C++类对象(二)]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/10/json2c-plus-plus2/"/>
    <updated>2014-05-10T01:25:15+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/10/json2c-plus-plus2</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>上一篇文章中讲述了在C++中如何把json字符串转换成c++类对象,<a href="http://charlessoft.github.io/blog/2014/05/09/jsonzhuan-huan-lei-dui-xiang-c-plus-plus/">把json字符串转换成C++类对象(一)</a>其中使用到了开源库(jsoncpp),函数指针,事先需要声明每个类相关代码,遍历完毕json字符串就得到对应类对象</p>

<!--more-->


<p>事先声明的代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>typedef void ( CStudentItem::*StudentItemFunc )( string key, void* value );
</span><span class='line'>
</span><span class='line'>typedef map&lt;string, StudentItemFunc&gt;JsonMethodMap;
</span><span class='line'>
</span><span class='line'>JsonMethodMap m_jsonMethodMap;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>void Set_XXX( string strKey, void* value );
</span><span class='line'>
</span><span class='line'>virtual void DealJsonNode( string strNode, string value );
</span><span class='line'>
</span><span class='line'>virtual void DealJsonNode( string strNode, int value );
</span></code></pre></td></tr></table></div></figure>


<p>当json字符串很多的时候.就造成每次都要声明重复的代码,过程很繁琐,而且容易写错,如何解决这个问题,或者可以相对简便些?</p>

<p>我想到了用宏定义来声明函数类似MFC中插入DECLARE_DYNAMIC等宏的方式,</p>

<p>我们把重复的代码提取出来,变成宏定义,插入到类声明中</p>

<p>宏定义</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#define JSON_TYPE_STRING 1
</span><span class='line'>#define JSON_TYPE_INT 2
</span><span class='line'>#define JSON_TYPE_DOUBLE 3
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#define JSON_DEFINE_METHODMAP( theclass ) \
</span><span class='line'>    typedef void ( theclass::*theclass##Func )( string strNode, void* value ); \
</span><span class='line'>        typedef map&lt;string, theclass##Func&gt;JsonMethodMap; \
</span><span class='line'>            JsonMethodMap m_jsonmapfunc;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#define JSON_DEAL_NODE_STRING() \
</span><span class='line'>    virtual void DealJsonNode( string strNode, string value ){ \
</span><span class='line'>        JsonMethodMap::iterator Iter = m_jsonmapfunc.find( strNode ); \
</span><span class='line'>        if ( Iter != m_jsonmapfunc.end() ) \
</span><span class='line'>        { \
</span><span class='line'>            (this-&gt;*m_jsonmapfunc[strNode])( strNode,  (void*)value.c_str() ); \
</span><span class='line'>        } \
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>#define JSON_DEAL_NODE_INT() \
</span><span class='line'>    virtual void DealJsonNode( string strNode, int value ){ \
</span><span class='line'>        JsonMethodMap::iterator Iter = m_jsonmapfunc.find( strNode ); \
</span><span class='line'>        if ( Iter != m_jsonmapfunc.end() ) \
</span><span class='line'>        { \
</span><span class='line'>            (this-&gt;*m_jsonmapfunc[strNode])( strNode,  (void*)value ); \
</span><span class='line'>        } \
</span><span class='line'>    }
</span></code></pre></td></tr></table></div></figure>


<p>修改后的代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>class CStudentItem : public IParseJson
</span><span class='line'>{
</span><span class='line'>    public:
</span><span class='line'>        string m_name;
</span><span class='line'>
</span><span class='line'>        int m_age;
</span><span class='line'>
</span><span class='line'>        string m_sex;
</span><span class='line'>        //设置函数指针
</span><span class='line'>        CStudentItem()
</span><span class='line'>        {
</span><span class='line'>            //设置结点对应的函数指针
</span><span class='line'>            m_jsonMethodMap["name"] = &CStudentItem::Set_Name;
</span><span class='line'>            m_jsonMethodMap["age"] = &CStudentItem::Set_Age;
</span><span class='line'>            m_jsonMethodMap["sex"] = &CStudentItem::Set_Sex;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        virtual ~CStudentItem(){}
</span><span class='line'>
</span><span class='line'>        //定义 JsonMethodMap
</span><span class='line'>        DECLARE_DYNAMIC( CStudentItem )
</span><span class='line'>
</span><span class='line'>        JSON_TYPE_STRING()
</span><span class='line'>
</span><span class='line'>        JSON_TYPE_INT()
</span><span class='line'>        //定义 JsonMethodMap
</span><span class='line'>
</span><span class='line'>        void Set_Name( string strKey, void* value )
</span><span class='line'>        {
</span><span class='line'>            this-&gt;m_name = (char*)value;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        void Set_Age( string strKey, void* value )
</span><span class='line'>        {
</span><span class='line'>            this-&gt;m_age = (intptr_t)value;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        void Set_Sex( string strKey, void* value )
</span><span class='line'>        {
</span><span class='line'>            this-&gt;m_sex = (char*)value;
</span><span class='line'>        }
</span><span class='line'>        //设置函数指针
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        //在map中找到对应的函数指针,对成员变量进行赋值
</span><span class='line'>
</span><span class='line'>        virtual IParseJson* CreateJsonItem( string strKey )
</span><span class='line'>        {
</span><span class='line'>            return this; //该类中没有一些数组,直接返回自身就好
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>};
</span></code></pre></td></tr></table></div></figure>


<p>剩下的每个类就只需要定义Set_XXX进行设置就好了. 后期看看怎么把Set_XXX函数进行优化.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[把json字符串转换成C++类对象(一)]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/09/jsonzhuan-huan-lei-dui-xiang-c-plus-plus/"/>
    <updated>2014-05-09T13:49:11+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/09/jsonzhuan-huan-lei-dui-xiang-c-plus-plus</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>c++中获取到json字符串后,每次需要遍历json字符串,然后把该json字符串中各个key对应的value取出来,赋值给各自的类对象.本文介绍如何把json字符串转成C++类对象</p>

<!--more-->


<h2>相关库</h2>

<h3>1. jsoncpp</h3>

<p>用于解析、遍历json库</p>

<h2>原理</h2>

<h3>1. 遍历json</h3>

<h3>2. 函数指针赋值</h3>

<p>根据json字符串,定义对应类,例如:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "students": [
</span><span class='line'>        {
</span><span class='line'>            "name": "zhangsan",
</span><span class='line'>            "age": 20,
</span><span class='line'>            "sex": "男"
</span><span class='line'>        },
</span><span class='line'>        {
</span><span class='line'>            "name": "lisi",
</span><span class='line'>            "age": 21,
</span><span class='line'>            "sex": "女"
</span><span class='line'>        }
</span><span class='line'>    ]
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>从以上json格式看,<code>students</code>节点包含2个数组,每个数组中都有一个<code>name</code>和<code>age</code>, 我们可以定义2个类, <code>CStudents</code>和<code>CStudentItem</code>类,
<code>CStudents</code>包含<code>CStudentItem</code>成员对象, <code>CStudentItem</code>包含<code>name</code>、<code>age</code>和<code>sex</code>成员函数</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class CStudentItem
</span><span class='line'>{
</span><span class='line'>private:
</span><span class='line'>    CStudentItem(){}
</span><span class='line'>
</span><span class='line'>    virtual ~CStudentItem(){}
</span><span class='line'>
</span><span class='line'>    string m_name;
</span><span class='line'>
</span><span class='line'>    int_ptr_t m_age;
</span><span class='line'>
</span><span class='line'>    string sex;
</span><span class='line'>    
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>class CStudents
</span><span class='line'>{
</span><span class='line'>private:
</span><span class='line'>    vector&lt;CStudentItem*&gt; m_StudentItemArr;
</span><span class='line'>};
</span></code></pre></td></tr></table></div></figure>


<p>下一步 我们需要解析Json,把json中对象的值设置到以上对应的类对象中,我们就面临2个问题,<br/>
1. 怎么遍历?可以从jsoncpp的demo中找到答案-见下面代码<br/>
2. 遍历完怎么设置到对应对象中?使用函数指针.</p>

<h4>遍历json</h4>

<p>建立一个IParseJson类,用于解析遍历Json<br/>
IParseJson.h</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>class IParseJson  
</span><span class='line'>{  
</span><span class='line'>
</span><span class='line'>public:
</span><span class='line'>  
</span><span class='line'>  IParseJson() {}   
</span><span class='line'>
</span><span class='line'>  virtual ~IParseJson() {}
</span><span class='line'>
</span><span class='line'>  virtual BOOL ParseJson( const char* json );
</span><span class='line'>
</span><span class='line'>protected:
</span><span class='line'>
</span><span class='line'>  virtual void DealJsonNode( string strNode, string value ){}
</span><span class='line'>
</span><span class='line'>  virtual void DealJsonNode( string strNode, int value ){}
</span><span class='line'>
</span><span class='line'>  virtual void DealJsonNode( string strNode, unsigned int value ){}
</span><span class='line'>
</span><span class='line'>  virtual void DealJsonNode( string strNode, double value ){}
</span><span class='line'>
</span><span class='line'>  virtual IParseJson* CreateJsonItem( string strKey );
</span><span class='line'>
</span><span class='line'>private:
</span><span class='line'>  virtual void PrintValueTree( Json::Value &value, IParseJson* pParent, IParseJson* pCurObj, const std::string strkey );
</span><span class='line'>
</span><span class='line'>};
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><code>PrintValueTree</code> 遍历json,在遍历中处理各自结点信息<br/>
<code>DealJsonNode</code> 在函数中,参数strNode是传递进来的结点名字,查找map对应的函数指针,进行赋值<br/>
<code>CreateJsonItem</code> 在函数中,参数strKey针对传递进来的结点名字,进行判断处理是否生成员变量对象.</p>

<p>IParseJson.cpp</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>
</span><span class='line'>#include &lt;algorithm&gt; // sort
</span><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stddef.h&gt;
</span><span class='line'>#include &lt;sstream&gt;
</span><span class='line'>IParseJson* IParseJson::CreateJsonItem( string strKey )
</span><span class='line'>{
</span><span class='line'>    return this;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void IParseJson::PrintValueTree( Json::Value &value, IParseJson* pParent, IParseJson* pobj, const std::string strkey )
</span><span class='line'>{
</span><span class='line'>    IParseJson* pTmpJsonNode = NULL;
</span><span class='line'>    switch ( value.type() )
</span><span class='line'>    {
</span><span class='line'>        case Json::nullValue:
</span><span class='line'>            {
</span><span class='line'>                break;
</span><span class='line'>            }
</span><span class='line'>        case Json::intValue:
</span><span class='line'>            pobj-&gt;DealJsonNode( strkey, value.asInt() );
</span><span class='line'>            break;
</span><span class='line'>        case Json::uintValue:
</span><span class='line'>            pobj-&gt;DealJsonNode( strkey, value.asUInt() );
</span><span class='line'>            break;
</span><span class='line'>        case Json::realValue:
</span><span class='line'>            pobj-&gt;DealJsonNode( strkey, value.asDouble() );
</span><span class='line'>            break;
</span><span class='line'>        case Json::stringValue:
</span><span class='line'>            pobj-&gt;DealJsonNode( strkey, value.asString() );
</span><span class='line'>            break;
</span><span class='line'>        case Json::booleanValue:
</span><span class='line'>            pobj-&gt;DealJsonNode( strkey, value.asBool() );
</span><span class='line'>            break;
</span><span class='line'>        case Json::arrayValue:
</span><span class='line'>            {
</span><span class='line'>                int size = value.size();
</span><span class='line'>
</span><span class='line'>                for ( int index =0; index &lt; size; ++index )
</span><span class='line'>                {
</span><span class='line'>                    pTmpJsonNode = pParent-&gt;CreateJsonItem( strkey );
</span><span class='line'>                    PrintValueTree( value[index], pParent, pTmpJsonNode, strkey );
</span><span class='line'>                }
</span><span class='line'>
</span><span class='line'>            }
</span><span class='line'>            break;
</span><span class='line'>        case Json::objectValue:
</span><span class='line'>            {
</span><span class='line'>                Json::Value::Members members( value.getMemberNames() );
</span><span class='line'>                std::sort( members.begin(), members.end() );
</span><span class='line'>                std::string suffix = "";
</span><span class='line'>                for ( Json::Value::Members::iterator it = members.begin();
</span><span class='line'>                        it != members.end();
</span><span class='line'>                        ++it )
</span><span class='line'>                {
</span><span class='line'>                    const std::string &name = *it;
</span><span class='line'>
</span><span class='line'>                    PrintValueTree( value[name], pobj, pobj, name );
</span><span class='line'>
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>            break;
</span><span class='line'>        default:
</span><span class='line'>            break;
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>BOOL IParseJson::ParseJson( const char* json )
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>    Json::Features features;
</span><span class='line'>    Json::Reader reader( features );
</span><span class='line'>    Json::Value root;
</span><span class='line'>    bool parsingSuccessful = reader.parse( json, root );
</span><span class='line'>    if ( !parsingSuccessful )
</span><span class='line'>    {
</span><span class='line'>        return FALSE;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    PrintValueTree( root, this, this , "" );
</span><span class='line'>    return TRUE;
</span><span class='line'>}
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>函数指针</h4>

<p>事先定义好函数,在各自函数中赋值对象值,用来遍历json时候,调用该函数,进行赋值<br/>
void Set_XXX( string strKey, void<em> value );<br/>
其中XXX为自定义的函数名称,取一个和json对象对应的名字, 例如: void Set_Name( string strKey, void</em> value );
代码修改成如下格式:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>class CStudentItem
</span><span class='line'>{
</span><span class='line'>private:
</span><span class='line'>    string m_name;
</span><span class='line'>    
</span><span class='line'>    int m_age;
</span><span class='line'>    
</span><span class='line'>    string sex;
</span><span class='line'>   
</span><span class='line'>    //设置函数指针
</span><span class='line'>    CStudentItem()
</span><span class='line'>    {
</span><span class='line'>        //设置结点对应的函数指针
</span><span class='line'>        m_jsonMethonMap["name"] = &CStudentItem::Set_Name;
</span><span class='line'>        m_jsonMethonMap["age"] = &CStudentItem::Set_Age;
</span><span class='line'>        m_jsonMethonMap["sex"] = &CStudentItem::Set_Sex;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    virtual ~CStudentItem(){}
</span><span class='line'>
</span><span class='line'>    typedef void ( CStudentItem::*StudentItemFunc )( string key, void* value );
</span><span class='line'>
</span><span class='line'>    typedef map&lt;string, StudentItemFunc&gt;JsonMethodMap;
</span><span class='line'>
</span><span class='line'>    JsonMethodMap m_jsonMethonMap;
</span><span class='line'>
</span><span class='line'>    void Set_Name( string strKey, void* value )
</span><span class='line'>    {
</span><span class='line'>        this-&gt;m_name = (char*)value;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    void Set_Age( string strKey, void* value )
</span><span class='line'>    {
</span><span class='line'>        this-&gt;m_age = atoi((char*)value));
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    void Set_Sex( string strKey, void* value )
</span><span class='line'>    {
</span><span class='line'>        this-&gt;m_sex = (char*)value;
</span><span class='line'>    }
</span><span class='line'>    //设置函数指针
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>class CStudents
</span><span class='line'>{
</span><span class='line'>private:
</span><span class='line'>    vector&lt;CStudentItem*&gt; m_StudentItemArr;
</span><span class='line'>};
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>现在实现了遍历Json,定义好函数指针后,怎么赋值?<br/>
我们让所有类都继承IParseJson, 实现DealJsonNode 函数,就可以实现对个类对象进行赋值<br/>
修改后的代码:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>class CStudentItem : public IParseJson
</span><span class='line'>{
</span><span class='line'>    public:
</span><span class='line'>        string m_name;
</span><span class='line'>
</span><span class='line'>        int m_age;
</span><span class='line'>
</span><span class='line'>        string m_sex;
</span><span class='line'>        //设置函数指针
</span><span class='line'>        CStudentItem()
</span><span class='line'>        {
</span><span class='line'>            //设置结点对应的函数指针
</span><span class='line'>            m_jsonMethodMap["name"] = &CStudentItem::Set_Name;
</span><span class='line'>            m_jsonMethodMap["age"] = &CStudentItem::Set_Age;
</span><span class='line'>            m_jsonMethodMap["sex"] = &CStudentItem::Set_Sex;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        virtual ~CStudentItem(){}
</span><span class='line'>
</span><span class='line'>        typedef void ( CStudentItem::*StudentItemFunc )( string key, void* value );
</span><span class='line'>
</span><span class='line'>        typedef map&lt;string, StudentItemFunc&gt;JsonMethodMap;
</span><span class='line'>
</span><span class='line'>        JsonMethodMap m_jsonMethodMap;
</span><span class='line'>
</span><span class='line'>        void Set_Name( string strKey, void* value )
</span><span class='line'>        {
</span><span class='line'>            this-&gt;m_name = (char*)value;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        void Set_Age( string strKey, void* value )
</span><span class='line'>        {
</span><span class='line'>            this-&gt;m_age = (intptr_t)value;
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        void Set_Sex( string strKey, void* value )
</span><span class='line'>        {
</span><span class='line'>            this-&gt;m_sex = (char*)value;
</span><span class='line'>        }
</span><span class='line'>        //设置函数指针
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        //在map中找到对应的函数指针,对成员变量进行赋值
</span><span class='line'>        virtual void DealJsonNode( string strNode, string value )
</span><span class='line'>        {
</span><span class='line'>            JsonMethodMap::iterator Iter = m_jsonMethodMap.find( strNode );
</span><span class='line'>            if ( Iter != m_jsonMethodMap.end() )
</span><span class='line'>            {
</span><span class='line'>                (this-&gt;*m_jsonMethodMap[strNode])( strNode,  (void*)value.c_str() );
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>        virtual void DealJsonNode( string strNode, int value )
</span><span class='line'>        {
</span><span class='line'>            JsonMethodMap::iterator Iter = m_jsonMethodMap.find( strNode );
</span><span class='line'>            if ( Iter != m_jsonMethodMap.end() )
</span><span class='line'>            {
</span><span class='line'>                (this-&gt;*m_jsonMethodMap[strNode])( strNode,  (void*)value );
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>        //在map中找到对应的函数指针,对成员变量进行赋值
</span><span class='line'>
</span><span class='line'>        virtual IParseJson* CreateJsonItem( string strKey )
</span><span class='line'>        {
</span><span class='line'>            return this; //该类中没有一些数组,直接返回自身就好
</span><span class='line'>        }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>};
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>调用</p>

<p>main.cpp</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#include &lt;stdio.h&gt;
</span><span class='line'>#include &lt;stdlib.h&gt;
</span><span class='line'>#include &lt;string&gt;
</span><span class='line'>using namespace std;
</span><span class='line'>
</span><span class='line'>#pragma comment(lib,"./jsoncpp/dbg/lib_json/json_vc10_libmtd.lib")
</span><span class='line'>
</span><span class='line'>int main()
</span><span class='line'>{
</span><span class='line'>
</span><span class='line'>  string strJson = "{ \"students\": [ { \"name\": \"zhangsan\", \"age\": 20, \"sex\": \"男\" }, { \"name\": \"lisi\", \"age\": 21, \"sex\": \"女\" } ] }";
</span><span class='line'>  CStudents* pStudents = new CStudents;
</span><span class='line'>  pStudents-&gt;ParseJson( strJson.c_str() );
</span><span class='line'>  for( int i=0;i&lt;pStudents-&gt;m_StudentItemArr.size(); i++ )
</span><span class='line'>  {
</span><span class='line'>      CStudentItem* pStudentItem = pStudents-&gt;m_StudentItemArr.at(i);
</span><span class='line'>      printf("name:%s\r\nage:%d\r\nsex:%s\r\n-----\r\n",pStudentItem-&gt;m_name.c_str(),
</span><span class='line'>          pStudentItem-&gt;m_age,pStudentItem-&gt;m_sex.c_str() );
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>结果:</p>

<p><img src="http://charlessoft.github.io/../images/json_to_obj/1.png"></p>

<p>小结:</p>

<p>只要声明好各个类成员变量并设置好对应的函数,就可以把json字符串转换成对应的类对象,
每个类对象都需要定义JsonMethodMap来保存函数指针,对于少量的json字符串,还可以接受,如果json字符串比较多,并且包含多个json数组等,我们就需要声明多个类,并且每个类都需要处理JsonMethodMap,比较繁琐,而且容易出错.</p>

<p>如何解决这个问题?可以使用一些宏定义,类似MFC中的定义一些列宏的思想来解决. 下文介绍</p>

<p><a href="http://url.cn/KmkwHO">json2obj demo</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins_install]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/07/jenkins-install/"/>
    <updated>2014-05-07T11:57:41+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/07/jenkins-install</id>
    <content type="html"><![CDATA[<h1>可持续集成 Jenkins</h1>

<h2>目录</h2>

<ol>
<li>环境</li>
<li>软件<br/>
2.1. Jenkins<br/>
2.2. Subversion<br/>
2.3. Apache<br/>
2.4. Jdk6<br/>
2.5. Tomcat<br/>
2.6. Python Jenkins模块</li>
<li>安装步骤<br/>
3.1. Jdk 安装和配置<br/>
3.2. 安装 apache<br/>
3.3. 安装subversion<br/>
3.4. 安装maven<br/>
3.5. 安装tomcat<br/>
3.6. 安装jenkins  <br/>
3.7. 安装jenkins插件</li>
<li>配置<br/>
4.1. Linux slave  <br/>
4.2. windows slave</li>
<li>测试git 仓库</li>
<li>遇到问题以及解决

<h2>概述</h2></li>
</ol>


<!--more-->


<h2>安装手册</h2>

<h3>1. 环境</h3>

<p>ububtu 13.4</p>

<h3>2. 软件</h3>

<p>2.1. Jenkins<br/>
2.2. Subversion(可选)<br/>
2.3. Apache(可选)<br/>
2.4. Jdk6<br/>
2.5. Tomcat(可选)<br/>
2.6. Python Jenkins模块</p>

<h3>3. 安装步骤</h3>

<h4>3.1. Jdk 安装和配置</h4>

<p>下载jdk<br/>
jdk-6u38-ea-bin-b04-linux-i586-31_oct_2012.bin(x32)<br/>
jdk-6u38-ea-bin-b04-linux-amd64-31_oct_2012.bin(x64)<br/>
下载地址：<a href="https://jdk6.java.net/download.html  ">https://jdk6.java.net/download.html  </a>
进入到jdk存放目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>mkdir /usr/local/java
</span><span class='line'>mv ./jdk-6u38-ea-bin-b04-linux-i586-31_oct_2012.bin /usr/local/java
</span><span class='line'>cd /usr/local/java
</span><span class='line'>chmod 755 ./jdk-6u38-ea-bin-b04-linux-i586-31_oct_2012.bin
</span><span class='line'>./jdk-6u38-ea-bin-b04-linux-i586-31_oct_2012.bin
</span></code></pre></td></tr></table></div></figure>


<p>设置环境变量 vi /etc/profile</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>export JAVA_HOME=/usr/local/java/jdk1.6.0_38
</span><span class='line'>export JAVA_BIN=/usr/local/java/jdk1.6.0_38/bin
</span><span class='line'>export PATH=$PATH:$JAVA_HOME/bin
</span><span class='line'>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export JAVA_HOME JAVA_BIN PATH CLASSPATH
</span></code></pre></td></tr></table></div></figure>


<p>使 /etc/profile立即生效</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source /etc/profile
</span></code></pre></td></tr></table></div></figure>


<h4>3.2. 安装 apache</h4>

<p>3.2.1. 安装apr-1.3.6.tar.gz<br/>
下载地址：
<a href="https://archive.apache.org/dist/apr/apr-1.3.6.tar.gz">https://archive.apache.org/dist/apr/apr-1.3.6.tar.gz</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>tar zxvf apr-1.3.6.tar.gz
</span><span class='line'>cd apr-1.3.6
</span><span class='line'>./configure
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>3.2.1. 安装apr-util<br/>
下载地址:<a href="https://archive.apache.org/dist/apr/apr-util-1.3.8.tar.gz">https://archive.apache.org/dist/apr/apr-util-1.3.8.tar.gz</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>tar zxvf apr-util-1.3.8.tar.gz
</span><span class='line'>cd apr-util-1.3.8
</span><span class='line'>./configure --with-apr=/usr/local/apr
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>3.2.3. 安装apache<br/>
下载地址:<a href="http://pkgs.fedoraproject.org/repo/pkgs/httpd/httpd-2.2.9.tar.gz/80d3754fc278338">http://pkgs.fedoraproject.org/repo/pkgs/httpd/httpd-2.2.9.tar.gz/80d3754fc278338</a> 033296f0d41ef2c04/httpd-2.2.9.tar.gz</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>tar zxvf httpd-2.2.9.tar.gz
</span><span class='line'>cd http-2.2.9
</span><span class='line'>./configure --prefix=/usr/local/apache2.2.9 --enable-dav --enable-so --enable-maintainer-mode --with-apr=/usr/local/apr/bin/apr-1-config --with-apr-util=/usr/local/apr/bin/apu-1-config
</span><span class='line'>make
</span><span class='line'>make install
</span><span class='line'>ln -s apache2.2.9 apache
</span></code></pre></td></tr></table></div></figure>


<h4>3.3. 安装subversion</h4>

<p>下载地址:<a href="https://archive.apache.org/dist/subversion/subversion-1.8.5.tar.gz">https://archive.apache.org/dist/subversion/subversion-1.8.5.tar.gz</a></p>

<p>sqlite
<a href="http://jaist.dl.sourceforge.net/project/sqlite.mirror/SQLite%203.8.3.1/sqlite-amalgamation-3080301.zip">http://jaist.dl.sourceforge.net/project/sqlite.mirror/SQLite%203.8.3.1/sqlite-amalgamation-3080301.zip</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>apt-get install zlib1g-dev
</span><span class='line'>tar zxvf subversin-1.8.5.tar.gz
</span><span class='line'>unzip sqlite-amalgamation.zip -d subversion-1.8.5
</span><span class='line'>cd subversion-1.8.5
</span><span class='line'>mv sqlite-amalgmation-3071501 sqlite-amalgamation
</span><span class='line'>./configure --prefix=/opt/svn --with-apxs=/usr/local/apache2.2.9/bin/apxs --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>配置svn<br/>
建立svn版本库目录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir -p /home/charles/svndata/repos
</span></code></pre></td></tr></table></div></figure>


<p>建立svn版本库</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svnadmin create /home/charles/svndata/repos
</span></code></pre></td></tr></table></div></figure>


<p>修改配置文件
vi /home/charles/svndata/repos/conf/svnserve.conf<br/>
去掉 passwd-db = passwd 的注释</p>

<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_1.png"></p>

<p>修改 passwd 文件,增加用户和密码</p>

<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_2.png"></p>

<p>启动svn服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>svnserve -d -r /home/charles/svndata/repos</span></code></pre></td></tr></table></div></figure>


<h4>3.4. 安装maven</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp apache-maven-3.2.1-bin.zip /usr/local cd /usr/local/
</span><span class='line'>unzip apache-maven-3.2.1-bin.zip
</span><span class='line'>ln -s apache-maven-3.2.1 apache-maven 配置环境变量
</span><span class='line'>vi /etc/profile
</span><span class='line'>export JAVA_HOME=/usr/local/ jdk1.6.0_38
</span><span class='line'>export JAVA_BIN=/usr/local/ jdk1.6.0_38/bin
</span><span class='line'>export M2_HOME=/usr/local/ apache-maven
</span><span class='line'>export PATH=$PATH:$JAVA_HOME/bin:$M2_HOME/bin
</span><span class='line'>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export JAVA_HOME JAVA_BIN PATH CLASSPATH</span></code></pre></td></tr></table></div></figure>


<p>立即生效配置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source /etc/profile</span></code></pre></td></tr></table></div></figure>


<h4>3.5. 安装tomcat</h4>

<p>下载地址:<a href="http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.52/bin/apache-tomcat-7.0.52.tar.gz">http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.52/bin/apache-tomcat-7.0.52.tar.gz</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp apache-tomcat-7.0.52.tar /usr/local/ tar zxvf apache-tomcat-7.0.52.tar
</span><span class='line'>ln -s apache-tomcat-7.0.52 apache-tomcat cd apache-tomcat/bin
</span><span class='line'>./startup.sh</span></code></pre></td></tr></table></div></figure>


<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_3.png"></p>

<p>打开web页面 <a href="http://localhost:8080">http://localhost:8080</a></p>

<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_4.png"></p>

<p>修改utf8编码
vi /etc/local/java/apache-tomcat-7.0.52/conf/server.xml</p>

<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_5.png"></p>

<h4>3.6. 安装jenkins</h4>

<p>下载地址:<a href="http://mirrors.jenkins-ci.org/war-stable/latest/jenkins.war">http://mirrors.jenkins-ci.org/war-stable/latest/jenkins.war</a></p>

<p>方法1:直接运行<br/>
java -jar jenkins.war</p>

<p>方法2:复制jenkins.war到/usr/local/apache-tomcat/webapps下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp jenkins.war /usr/local/apache-tomcat/webapps</span></code></pre></td></tr></table></div></figure>


<p>重启tomcat
打开url <a href="http://localhost:8080/jenkins">http://localhost:8080/jenkins</a></p>

<h4>3.7. 安装jenkins插件</h4>

<p>Publish Over SSH &mdash;>用来控制发布程序后执行脚本</p>

<h4>3.8. git 插件</h4>

<p>git 插件用于连接git 仓库. jenkins默认是不带git 插件,需要自行安装.
安装的git插件分别是:<br/>
<strong>scm-api</strong><br/>
<strong>git-client</strong><br/>
<strong>git</strong></p>

<h3>4. 配置</h3>

<h4>4.1. Linux slave</h4>

<p>4.1.1. 安装jdk(同 3.1 Jdk安装和配置)</p>

<p>4.1.2. 安装maven(同 3.4 安装maven)</p>

<p>4.1.3. 安装ssh服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo /usr/sbin/useradd -m jenkins -d /home/Jenkins echo “jenkins:jenkins” | chpasswd
</span><span class='line'>su - jenkins 切换到 jenkins 用户
</span><span class='line'>java --version 确保 java 安装正确
</span><span class='line'>ssh-keygen 生成 ssh key 信息,按三次回车,表示把 key 存储在 /home/jenkins/.ssh/id_rsa 下,不设置密码
</span><span class='line'>cd .ssh
</span><span class='line'>cat id_rsa.pub &gt; authorized_keys
</span><span class='line'>chmod 700 authorized_keys
</span><span class='line'>将 id_rsa(相当于 privatekey)拷贝到 jenkins master 机器上,例如/root/.jenkins/id_rsa 下</span></code></pre></td></tr></table></div></figure>


<p>4.1.4 在jenkins页面增加slave
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_6.png"><br/>
增加证书<br/>
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_7.png"><br/>
设置 publish over ssh<br/>
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_8.png"></p>

<h4>4.2. windows slave</h4>

<p>4.2.1. 安装cygwin</p>

<p>选择安装ssh服务,cygwin默认是不安装OpenSSH的,需要手动选,在Netl类别下选上OpenSSH和OpenSSL两项
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_9.png"><br/>
等到下载完并完成安装,设置环境变量,把C:/cygwin/bin;C:/cygwin/usr/bin 加 入到系统环境变量的 Path 中</p>

<h3>5. 测试git 仓库</h3>

<p>例如代码库地址:test@114.114.114.114:/home/test/submd/repos/testProject.git</p>

<p>我们需要把本机的id_rsa.pub保存到114.114.114.114的authorized_keys(免密码登陆,请百度),否则会更新不成功,会提示以下错误<br/>
tomcat 必须是该用户启动的,否则也会提示以下错误
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_10.png"><br/>
登陆到ci 服务器配置该工程信息
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_11.png"></p>

<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_12.png"></p>

<p>构建工程,可以看到输出的结果
<img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_13.png"></p>

<h3>6. 遇到问题以及解决</h3>

<h4>Q: slave /usr/bin/java does not found</h4>

<h4>A: slave中需要安装jdk,jenkins默认查找jdk的路径是/usr/bin/java,解决方法,设置ln链接, 在cygwin中输入以下命令</h4>

<pre><code>ln -s /cygdrive/c/Program\ Files\ \(x86\)/Java/jdk1.6.0_38/bin/java.exe /usr/bin/java
</code></pre>

<h4>Q: 在slave中经常遇到stderr:Host key verification failed.</h4>

<h4>A: 网上大部分是说把knows_keys删除掉,貌似没有效果.个人感觉最有效的方法.就是使用master中ssh到各个slave中,再ssh到代码仓库中,把id_rsa.pub增加到authorized_keys中(免密码登陆).</h4>

<p><img src="http://charlessoft.github.io/../images/jenkins_install/jenkins_install_pic_14.png"></p>

<h4>Q: ssh 连接到slave时候,输入正确的账号密码,但经常遇到Permission denied 问题</h4>

<h4>A: 一种是由于authorized_keys 权限设置不对导致,设置authorized_keys 权限为644,一种由于账号没配置对导致,可以执行以下命令</h4>

<p><code>mkpasswd.exe -l &gt; /etc/pass</code></p>
]]></content>
  </entry>
  
</feed>
