<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | 学海拾贝 Blog]]></title>
  <link href="http://charlessoft.github.io/blog/categories/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://charlessoft.github.io/"/>
  <updated>2014-05-10T02:08:41+08:00</updated>
  <id>http://charlessoft.github.io/</id>
  <author>
    <name><![CDATA[charlessoft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[把json字符串转换成C++类对象(二)]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/10/json2c-plus-plus2/"/>
    <updated>2014-05-10T01:25:15+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/10/json2c-plus-plus2</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>上一篇文章中讲述了在C++中如何把json字符串转换成c++类对象,<a href="http://charlessoft.github.io/blog/2014/05/09/jsonzhuan-huan-lei-dui-xiang-c-plus-plus/">把json字符串转换成C++类对象(一)</a>其中使用到了开源库(jsoncpp),函数指针,事先需要声明每个类相关代码,遍历完毕json字符串就得到对应类对象</p>

<!--more-->


<p>事先声明的代码</p>

<p>```</p>

<p>typedef void ( CStudentItem::<em>StudentItemFunc )( string key, void</em> value );</p>

<p>typedef map&lt;string, StudentItemFunc>JsonMethodMap;</p>

<p>JsonMethodMap m_jsonMethodMap;</p>

<p>void Set_XXX( string strKey, void* value );</p>

<p>virtual void DealJsonNode( string strNode, string value );</p>

<p>virtual void DealJsonNode( string strNode, int value );</p>

<p>```</p>

<p>当json字符串很多的时候.就造成每次都要声明重复的代码,过程很繁琐,而且容易写错,如何解决这个问题,或者可以相对简便些?</p>

<p>我想到了用宏定义来声明函数类似MFC中插入DECLARE_DYNAMIC等宏的方式,</p>

<p>我们把重复的代码提取出来,变成宏定义,插入到类声明中</p>

<p>宏定义
```</p>

<h1>define JSON_TYPE_STRING 1</h1>

<h1>define JSON_TYPE_INT 2</h1>

<h1>define JSON_TYPE_DOUBLE 3</h1>

<h1>define JSON_DEFINE_METHODMAP( theclass ) \</h1>

<pre><code>typedef void ( theclass::*theclass##Func )( string strNode, void* value ); \
    typedef map&lt;string, theclass##Func&gt;JsonMethodMap; \
        JsonMethodMap m_jsonmapfunc;
</code></pre>

<h1>define JSON_DEAL_NODE_STRING() \</h1>

<pre><code>virtual void DealJsonNode( string strNode, string value ){ \
    JsonMethodMap::iterator Iter = m_jsonmapfunc.find( strNode ); \
    if ( Iter != m_jsonmapfunc.end() ) \
    { \
        (this-&gt;*m_jsonmapfunc[strNode])( strNode,  (void*)value.c_str() ); \
    } \
}
</code></pre>

<h1>define JSON_DEAL_NODE_INT() \</h1>

<pre><code>virtual void DealJsonNode( string strNode, int value ){ \
    JsonMethodMap::iterator Iter = m_jsonmapfunc.find( strNode ); \
    if ( Iter != m_jsonmapfunc.end() ) \
    { \
        (this-&gt;*m_jsonmapfunc[strNode])( strNode,  (void*)value ); \
    } \
}
</code></pre>

<p>```</p>

<p>修改后的代码</p>

<p>```</p>

<p>class CStudentItem : public IParseJson
{</p>

<pre><code>public:
    string m_name;

    int m_age;

    string m_sex;
    //设置函数指针
    CStudentItem()
    {
        //设置结点对应的函数指针
        m_jsonMethodMap["name"] = &amp;CStudentItem::Set_Name;
        m_jsonMethodMap["age"] = &amp;CStudentItem::Set_Age;
        m_jsonMethodMap["sex"] = &amp;CStudentItem::Set_Sex;
    }

    virtual ~CStudentItem(){}

    //定义 JsonMethodMap
    DECLARE_DYNAMIC( CStudentItem )

    JSON_TYPE_STRING()

    JSON_TYPE_INT()
    //定义 JsonMethodMap

    void Set_Name( string strKey, void* value )
    {
        this-&gt;m_name = (char*)value;
    }

    void Set_Age( string strKey, void* value )
    {
        this-&gt;m_age = (intptr_t)value;
    }

    void Set_Sex( string strKey, void* value )
    {
        this-&gt;m_sex = (char*)value;
    }
    //设置函数指针


    //在map中找到对应的函数指针,对成员变量进行赋值

    virtual IParseJson* CreateJsonItem( string strKey )
    {
        return this; //该类中没有一些数组,直接返回自身就好
    }
</code></pre>

<p>};</p>

<p>```</p>

<p>剩下的每个类就只需要定义Set_XXX进行设置就好了. 后期看看怎么把Set_XXX函数进行优化.</p>
]]></content>
  </entry>
  
</feed>
