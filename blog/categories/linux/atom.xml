<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 学海拾贝 Blog]]></title>
  <link href="http://charlessoft.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://charlessoft.github.io/"/>
  <updated>2014-06-30T01:10:25+08:00</updated>
  <id>http://charlessoft.github.io/</id>
  <author>
    <name><![CDATA[charlessoft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux_lock_package]]></title>
    <link href="http://charlessoft.github.io/blog/2014/06/30/linux-lock-package/"/>
    <updated>2014-06-30T00:58:59+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/06/30/linux-lock-package</id>
    <content type="html"><![CDATA[<h1>读写锁,互斥锁封装</h1>

<p>炼数成金的课程中把互斥锁和读写锁封装了一个类,一起分享下,适用windows/linux,</p>

<p>```</p>

<h1>ifndef OSSLATCH_HPP__</h1>

<h1>define OSSLATCH_HPP__</h1>

<h1>include &ldquo;core.hpp&rdquo;</h1>

<h1>ifdef _WINDOWS</h1>

<h1>define oss_mutex_t                     CRITICAL_SECTION</h1>

<h1>define oss_mutex_init(<strong>lock, </strong>attribute)     InitializeCriticalSection( (__lock) )</h1>

<h1>define oss_mutex_destroy               DeleteCriticalSection</h1>

<h1>define oss_mutex_lock                  EnterCriticalSection</h1>

<h1>define oss_mutex_trylock(<strong>lock)       (TRUE == TryEnterCriticalSection( (</strong>lock) ) )</h1>

<h1>define oss_mutex_unlock                LeaveCriticalSection</h1>

<h1>define oss_rwlock_t                    SRWLOCK</h1>

<h1>define oss_rwlock_init(<strong>lock, </strong>attribute)        InitializeSRWLock( (__lock) )</h1>

<h1>define oss_rwlock_destroy(__lock)      (1)</h1>

<h1>define oss_rwlock_rdlock               AcquireSRWLockShared</h1>

<h1>define oss_rwlock_rdunlock             ReleaseSRWLockShared</h1>

<h1>define oss_rwlock_wrlock               AcquireSRWLockExclusive</h1>

<h1>define oss_rwlock_wrunlock             ReleaseSRWLockExclusive</h1>

<h1>define oss_rwlock_rdtrylock(__lock)    (false)</h1>

<h1>define oss_rwlock_wrtrylock(__lock)    (false)</h1>

<h1>else</h1>

<h1>define oss_mutex_t                     pthread_mutex_t</h1>

<h1>define oss_mutex_init                  pthread_mutex_init</h1>

<h1>define oss_mutex_destroy               pthread_mutex_destroy</h1>

<h1>define oss_mutex_lock                  pthread_mutex_lock</h1>

<h1>define oss_mutex_trylock(<strong>lock)   (pthread_mutex_trylock( (</strong>lock) ) == 0 )</h1>

<h1>define oss_mutex_unlock                pthread_mutex_unlock</h1>

<h1>define oss_rwlock_t                    pthread_rwlock_t</h1>

<h1>define oss_rwlock_init                 pthread_rwlock_init</h1>

<h1>define oss_rwlock_destroy              pthread_rwlock_destroy</h1>

<h1>define oss_rwlock_rdlock               pthread_rwlock_rdlock</h1>

<h1>define oss_rwlock_rdunlock             pthread_rwlock_unlock</h1>

<h1>define oss_rwlock_wrlock               pthread_rwlock_wrlock</h1>

<h1>define oss_rwlock_wrunlock             pthread_rwlock_unlock</h1>

<h1>define oss_rwlock_rdtrylock(<strong>lock)    (pthread_rwlock_tryrdlock( (</strong>lock) ) == 0 )</h1>

<h1>define oss_rwlock_wrtrylock(<strong>lock)    (pthread_rwlock_trywrlock ( ( </strong>lock) ) == 0 )</h1>

<h1>endif</h1>

<p>enum OSS_LATCH_MODE
{
   SHARED ,
   EXCLUSIVE
} ;</p>

<p>class ossXLatch
{
private :
   oss_mutex_t _lock ;
public :
   ossXLatch ()
   {</p>

<pre><code>  oss_mutex_init ( &amp;_lock, 0 ) ;
</code></pre>

<p>   }
   ~ossXLatch ()
   {</p>

<pre><code>    oss_mutex_destroy(&amp;_lock);
</code></pre>

<p>   }
   void get ()
   {</p>

<pre><code>    oss_mutex_lock(&amp;_lock);
</code></pre>

<p>   }
   void release ()
   {</p>

<pre><code>    oss_mutex_unlock(&amp;_lock);
</code></pre>

<p>   }
   bool try_get ()
   {</p>

<pre><code>    return oss_mutex_trylock(&amp;_lock);
</code></pre>

<p>   }
} ;</p>

<p>class ossSLatch
{
private :
   oss_rwlock_t _lock ;
public :
   ossSLatch ()
   {</p>

<pre><code>  oss_rwlock_init ( &amp;_lock, 0 ) ;
</code></pre>

<p>   }</p>

<p>   ~ossSLatch ()
   {</p>

<pre><code>  oss_rwlock_destroy ( &amp;_lock ) ;
</code></pre>

<p>   }</p>

<p>   void get ()
   {</p>

<pre><code>  oss_rwlock_wrlock ( &amp;_lock ) ;
</code></pre>

<p>   }</p>

<p>   void release ()
   {</p>

<pre><code>  oss_rwlock_wrunlock ( &amp;_lock ) ;
</code></pre>

<p>   }</p>

<p>   bool try_get ()
   {</p>

<pre><code>  return ( oss_rwlock_wrtrylock ( &amp;_lock ) ) ;
</code></pre>

<p>   }</p>

<p>   void get_shared ()
   {</p>

<pre><code>  oss_rwlock_rdlock ( &amp;_lock ) ;
</code></pre>

<p>   }</p>

<p>   void release_shared ()
   {</p>

<pre><code>  oss_rwlock_rdunlock ( &amp;_lock ) ;
</code></pre>

<p>   }</p>

<p>   bool try_get_shared ()
   {</p>

<pre><code>  return ( oss_rwlock_rdtrylock ( &amp;_lock ) ) ;
</code></pre>

<p>   }
} ;</p>

<h1>endif</h1>

<p>```</p>

<p>```
//调用</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &ldquo;ossLatch.hpp&rdquo;</h1>

<h1>include   &lt;unistd.h></h1>

<p>ossXLatch Mutex_lock;
ossSLatch Shared_lock;
pthread_t id;
pthread_t id1;</p>

<p>void ReadLog( void *ptr )
{</p>

<pre><code>unsigned int pid = (unsigned int )ptr;
printf("Thread %u lock--\n",pid);
FILE* fp = fopen("log.txt","rb");
if(fp)
{
    fseek(fp,0,SEEK_END);
    int nlen = ftell(fp);
    fseek(fp,0,SEEK_SET);
    char* pData = new char[nlen+1];
    memset(pData,0,nlen+1);
    fread(pData,1,nlen,fp);
    fclose(fp);
    printf("%s",pData);
    delete [] pData;
}
sleep(2);
printf("Thread %u unlock--\n",pid);
</code></pre>

<p>}</p>

<p>void <em>rd_lock_thread( void</em> ptr )
{</p>

<pre><code>Shared_lock.get_shared();
printf("读锁,其他线程才可以进入\n");
ReadLog( ptr );
Shared_lock.release();
</code></pre>

<p>}</p>

<p>void <em>rw_lock_thread( void</em> ptr )
{</p>

<pre><code>Shared_lock.get();
printf("写锁,只有该线程解锁 %u ,其他线程才可以进入\n",(unsigned int ) ptr );
ReadLog( ptr );
Shared_lock.release();
</code></pre>

<p>}</p>

<p>void <em>mutex_thread(void </em>ptr)
{</p>

<pre><code>Mutex_lock.get();
printf("只有当 Thread %u 解锁,其他线程才可以进入--\n",(unsigned int ) ptr);
ReadLog( ptr );
Mutex_lock.release();
</code></pre>

<p>}</p>

<p>int main(int argc, const char *argv[])
{</p>

<pre><code>int i,ret;


printf("演示:mutex-互斥锁--\n");
ret=pthread_create(&amp;id,NULL,mutex_thread,(void*)1);
ret=pthread_create(&amp;id1,NULL,mutex_thread,(void*)2);
pthread_join(id,NULL);
pthread_join(id1,NULL);
printf("-------------------------------------\n\n");

printf("演示:读写锁--读锁--\n");
ret=pthread_create(&amp;id,NULL,rd_lock_thread,(void*)1);
ret=pthread_create(&amp;id1,NULL,rd_lock_thread,(void*)2);
pthread_join(id,NULL);
pthread_join(id1,NULL);

printf("-------------------------------------\n\n");


printf("演示:读写锁--写锁--\n");
ret=pthread_create(&amp;id,NULL,rw_lock_thread,(void*)1);
ret=pthread_create(&amp;id1,NULL,rw_lock_thread,(void*)2);
pthread_join(id,NULL);
pthread_join(id1,NULL);

return 0;
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux_lock]]></title>
    <link href="http://charlessoft.github.io/blog/2014/06/29/linux-lock/"/>
    <updated>2014-06-29T23:49:52+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/06/29/linux-lock</id>
    <content type="html"><![CDATA[<h1>Linux下互斥锁,读写锁区别</h1>

<h2>目录</h2>

<p>1.互斥锁<br/>
2.读写锁</p>

<p>互斥锁 实现多个线程之间的同步,互斥锁主要函数<br/>
1.pthread_mutex_init &ndash;>初始化 <br/>
2.pthread_mutex_destroy &mdash;>销毁 <br/>
3.pthread_mutex_lock &mdash;>加锁<br/>
4.pthread_mutex_unlock &mdash;>解锁</p>

<p>读写锁 比mutex有更高的适用性，可以多个线程同时占用读模式的读写锁，但是只能一个线程占用写模式的读写锁。<br/>
当读写锁是读加锁状态,所有以读模式对它进行加锁的线程都可以获得到访问权,但是以写模式对它加锁的线程将阻塞<br/>
当读写锁是写加锁状态,所以对该资源进行操作的线程都会阻塞,直到该锁解锁.<br/>
读写锁函数<br/>
1.pthread_rwlock_init &mdash;>初始化<br/>
2.pthread_rwlock_destroy &mdash;>销毁<br/>
3.pthread_rwlock_rdlock &mdash;>读锁定<br/>
4.pthread_rwlock_unlock &mdash;>解锁,写锁定的解锁也是调用该函数<br/>
5.pthread_rwlock_rwlock &mdash;>写锁定 <br/>
6.pthread_rwlock_tryrdlock &mdash;>尝试是否能获得到读锁<br/>
7.pthread_rwlock_trywrlock &mdash;>尝试是否能获得到写锁</p>

<p>以下是测试的例子</p>

<p>```</p>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;stdlib.h></h1>

<h1>include &lt;string.h></h1>

<h1>include &lt;unistd.h></h1>

<p>pthread_t id;
pthread_t id1;
pthread_rwlock_t _lock;
pthread_mutex_t mutex;
void ReadLog( void *ptr )
{</p>

<pre><code>unsigned int pid = (unsigned int )ptr;
printf("Thread %u lock--\n",pid);
FILE* fp = fopen("log.txt","rb");
if(fp)
{
    fseek(fp,0,SEEK_END);
    int nlen = ftell(fp);
    fseek(fp,0,SEEK_SET);
    char* pData = new char[nlen+1];
    memset(pData,0,nlen+1);
    fread(pData,1,nlen,fp);
    fclose(fp);
    printf("%s",pData);
    delete [] pData;
}
sleep(2);
printf("Thread %u unlock--\n",pid);
</code></pre>

<p>}</p>

<p>void <em>rd_lock_thread( void</em> ptr )
{</p>

<pre><code>pthread_rwlock_rdlock( &amp;_lock );
printf("读锁,其他线程才可以进入\n");
ReadLog( ptr );
pthread_rwlock_unlock( &amp;_lock );
</code></pre>

<p>}</p>

<p>void <em>rw_lock_thread( void</em> ptr )
{</p>

<pre><code>pthread_rwlock_wrlock( &amp;_lock );
printf("写锁,只有该线程解锁 %u ,其他线程才可以进入\n",(unsigned int ) ptr );
ReadLog( ptr );
pthread_rwlock_unlock( &amp;_lock );
</code></pre>

<p>}</p>

<p>void <em>mutex_thread(void </em>ptr)
{</p>

<pre><code>pthread_mutex_lock(&amp;mutex);
printf("只有当 Thread %u 解锁,其他线程才可以进入--\n",(unsigned int ) ptr);
ReadLog( ptr );
pthread_mutex_unlock(&amp;mutex);
</code></pre>

<p>}</p>

<p>int main(int argc, const char *argv[])
{</p>

<pre><code>int i,ret;
printf("演示:mutex-互斥锁--\n");
pthread_mutex_init( &amp;mutex, NULL );
ret=pthread_create(&amp;id,NULL,mutex_thread,(void*)1);
ret=pthread_create(&amp;id1,NULL,mutex_thread,(void*)2);
pthread_join(id,NULL);
pthread_join(id1,NULL);
pthread_mutex_destroy( &amp;mutex );
printf("-------------------------------------\n\n");

printf("演示:读写锁--读锁--\n");
pthread_rwlock_init(&amp;_lock,0);
ret=pthread_create(&amp;id,NULL,rd_lock_thread,(void*)1);
ret=pthread_create(&amp;id1,NULL,rd_lock_thread,(void*)2);
pthread_join(id,NULL);
pthread_join(id1,NULL);
pthread_rwlock_destroy(&amp;_lock);
printf("-------------------------------------\n\n");


printf("演示:读写锁--写锁--\n");
pthread_rwlock_init(&amp;_lock,0);
ret=pthread_create(&amp;id,NULL,rw_lock_thread,(void*)1);
ret=pthread_create(&amp;id1,NULL,rw_lock_thread,(void*)2);
pthread_join(id,NULL);
pthread_join(id1,NULL);
pthread_rwlock_destroy(&amp;_lock);

return 0;
</code></pre>

<p>}
```</p>

<p><img src="/../images/linux_lock/linux_lock_pic_1.png"><br/>
<img src="/../images/linux_lock/linux_lock_pic_2.png"><br/>
<img src="/../images/linux_lock/linux_lock_pic_3.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authorized_keys权限导致登陆失败问题]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/25/ssh-authorized-keysmian-mi-ma-shi-bai-wen-ti/"/>
    <updated>2014-05-25T13:34:22+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/25/ssh-authorized-keysmian-mi-ma-shi-bai-wen-ti</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>authorized_keys 是将用户的公钥,保存在登陆$HOME/.ssh/authorized_keys,公钥是一段字符串,只要把它追加在authorized_keys文件的末尾就行了,下次用户可以免密码登陆.</p>

<p>经过测试免密码登陆<code>CentOs Linux 6.5 X64位</code>系统与<code>authorized_keys</code>文件权限有关系</p>

<p><img src="/../images/ssh_authorized/ssh_authorized_key_1.png"><br/>
有上图看出authorized_keys 权限是<code>-rw-rw-r-</code>
即使把客户端的id_rsa.pub 保存到服务器的authorized_keys上也连接不了,需要把属性修改成<code>-rw-r--r--</code>或者<code>-rw------</code></p>

<p>修改命令:</p>

<p><code>
chmod 644 authorized_keys
或
chmod 600 authorized_keys
</code></p>

<p><img src="/../images/ssh_authorized/ssh_authorized_key_2.png"><br/>
这样就可以连接上</p>
]]></content>
  </entry>
  
</feed>
