<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | 学海拾贝 Blog]]></title>
  <link href="http://charlessoft.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://charlessoft.github.io/"/>
  <updated>2014-07-08T06:51:35+08:00</updated>
  <id>http://charlessoft.github.io/</id>
  <author>
    <name><![CDATA[charlessoft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git远程分支]]></title>
    <link href="http://charlessoft.github.io/blog/2014/07/01/gityuan-cheng-fen-zhi/"/>
    <updated>2014-07-01T23:10:10+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/07/01/gityuan-cheng-fen-zhi</id>
    <content type="html"><![CDATA[<h1>git 远程分支命令</h1>

<p>git 版本控制管理工具,比较强大,刚开始用的时候感觉不适应,特别是很多命令行,分支等等,感觉和svn比起来,还是svn用的比较舒服,但是用久了git,就会发觉git的强大,git采用分布式版本库做法,不需要服务器端软件,只要安装了git本地就可以运作版本控制,网上有很多git和svn对比,这里就不列举了,这里只列一下自己感受比svn好的地方.</p>

<p>1.随时提交代码到本地版本库,特别适合没网络的环境.<br/>
2.git 切换分支很方便,个人感觉比svn强大很多.<br/>
git 可以在同一个目录下随时切换分支,svn(好像不行).</p>

<p>以下列举下git一些分支命令<br/>
<code>git checkout -b dev1</code> &mdash;>新生成分支并且切换到dev1分支<br/>
<code>git push origin dev1</code> &mdash;>上传到远程分支<br/>
<code>git checkout -b dev1 origin/dev1</code> &mdash;>下载远程分支</p>

<p>git 常用命令<br/>
<code>git init</code> &mdash;>初始化版本库<br/>
<code>git add -u</code> &mdash;>增加更新的文件到版本中<br/>
<code>git commit -m "log 内容"</code> &mdash;>提交到版本库<br/>
<code>git push origin master</code> &mdash;>更新到远程主干中<br/>
<code>git reset --hard commit_id</code> &mdash;>彻底回退到某个版本，本地的源码也会变为上一个版本的内容  <br/>
<code>git reset --mixed commit_id</code> &mdash;>回退到指定的commit_id,保留修改后的源码,可以使用<code>git add -u</code>和<code>git commit -m"xxx"</code>提交到版本库<br/>
<code>git reset --soft commit_id</code> &mdash;>会退到指定的commit_id,只回退了commit信息,可以使用<code>git commit -m"xxx"</code>再次提交<br/>
<code>强制提交到远程版本库</code>&ndash;>有时候需要删除远程版本库中前几次提交,可以使用命令<br/>
<code>git reset --hard commit_id</code>然后使用<code>git push origin HEAD --force</code></p>
]]></content>
  </entry>
  
</feed>
