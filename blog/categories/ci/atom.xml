<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ci | 学海拾贝 Blog]]></title>
  <link href="http://charlessoft.github.io/blog/categories/ci/atom.xml" rel="self"/>
  <link href="http://charlessoft.github.io/"/>
  <updated>2014-07-08T06:51:35+08:00</updated>
  <id>http://charlessoft.github.io/</id>
  <author>
    <name><![CDATA[charlessoft]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jenkins_plugin_邮件通知]]></title>
    <link href="http://charlessoft.github.io/blog/2014/06/03/jenkins-plugin-email-ext/"/>
    <updated>2014-06-03T00:05:29+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/06/03/jenkins-plugin-email-ext</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>使用jenkins持续编译程序后,可以发送编译的结果给特定的人员,以便邮件方式告知编译或测试结果
jenkins 默认有自带了邮件通知功能,但是使用起来不是很方便,本文使用Email-ext plugin进行发送邮件</p>

<h2>插件名称:</h2>

<p><strong>Email-ext plugin</strong></p>

<p>如果手工安装插件还需要安装 Token macro Plugin</p>

<p>安装好插件后在jenkins->系统管理->系统配置里头就会看到<code>Extended E-email Notification</code>选项
设置以下选项.就可以发送邮件</p>

<p><img src="/../images/jenkins_plugin_email/jenkins_plugin_email_pic_1.png"></p>

<h2>使用插件</h2>

<p>在项目配置中选择<code>增加构建后操作步骤</code>&ndash;><code>E-email Notification</code>
<img src="/../images/jenkins_plugin_email/jenkins_plugin_email_pic_2.png">
当项目编译后.就会发送邮件到指定的用户</p>

<h2>指定邮件模板</h2>

<p>```</p>

<p>```</p>

<p>对邮件中字段详细说明待续再更新&mdash;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 批量增加用户]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/20/linux-pi-liang-zeng-jia-yong-hu/"/>
    <updated>2014-05-20T23:10:05+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/20/linux-pi-liang-zeng-jia-yong-hu</id>
    <content type="html"><![CDATA[<h2>概述</h2>

<p>linux下经常需要增加用户进行执行脚本,下文介绍使用shell脚本增加用户,可以实现批量增加用户.</p>

<!--more-->


<h2>步骤</h2>

<h3>相关命令</h3>

<ol>
<li>newusers &mdash;新建用户</li>
<li>chpasswd &mdash;修改用户密码</li>
</ol>


<p>建立一个和/etc/passwd 一样的文本内容userlist.txt
```
ubuntu00:x:520:520::/home/ubuntu00:/bin/bash
ubuntu01:x:521:521::/home/ubuntu01:/bin/bash
ubuntu02:x:522:522::/home/ubuntu02:/bin/bash
ubuntu03:x:523:523::/home/ubuntu03:/bin/bash
ubuntu04:x:524:524::/home/ubuntu04:/bin/bash
ubuntu05:x:525:525::/home/ubuntu05:/bin/bash
ubuntu06:x:526:526::/home/ubuntu06:/bin/bash
ubuntu07:x:527:527::/home/ubuntu07:/bin/bash
ubuntu08:x:528:528::/home/ubuntu08:/bin/bash
ubuntu09:x:529:529::/home/ubuntu09:/bin/bash</p>

<p>```</p>

<p>建立一个password.txt 文件,保存用户名对应的密码,格式如下
<code>
ubuntu00:123456
ubuntu01:123456
ubuntu02:123456
ubuntu03:123456
ubuntu04:123456
ubuntu05:123456
ubuntu06:123456
ubuntu07:123456
ubuntu08:123456
ubuntu09:123456
</code></p>

<h3>使用命令</h3>

<p><code>
newusers userlist.txt
chpasswd &lt; password.txt
</code>
就添加完成了,su &ndash; ubuntu00 输入密码123456,就切换到该用户下,可以输入bash,使用bash.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins_install]]></title>
    <link href="http://charlessoft.github.io/blog/2014/05/07/jenkins-install/"/>
    <updated>2014-05-07T11:57:41+08:00</updated>
    <id>http://charlessoft.github.io/blog/2014/05/07/jenkins-install</id>
    <content type="html"><![CDATA[<h1>可持续集成 Jenkins</h1>

<h2>目录</h2>

<ol>
<li>环境</li>
<li>软件<br/>
2.1. Jenkins<br/>
2.2. Subversion<br/>
2.3. Apache<br/>
2.4. Jdk6<br/>
2.5. Tomcat<br/>
2.6. Python Jenkins模块</li>
<li>安装步骤<br/>
3.1. Jdk 安装和配置<br/>
3.2. 安装 apache<br/>
3.3. 安装subversion<br/>
3.4. 安装maven<br/>
3.5. 安装tomcat<br/>
3.6. 安装jenkins  <br/>
3.7. 安装jenkins插件</li>
<li>配置<br/>
4.1. Linux slave  <br/>
4.2. windows slave</li>
<li>测试git 仓库</li>
<li>遇到问题以及解决

<h2>概述</h2></li>
</ol>


<!--more-->


<h2>安装手册</h2>

<h3>1. 环境</h3>

<p>ububtu 13.4</p>

<h3>2. 软件</h3>

<p>2.1. Jenkins<br/>
2.2. Subversion(可选)<br/>
2.3. Apache(可选)<br/>
2.4. Jdk6<br/>
2.5. Tomcat(可选)<br/>
2.6. Python Jenkins模块</p>

<h3>3. 安装步骤</h3>

<h4>3.1. Jdk 安装和配置</h4>

<p>下载jdk<br/>
jdk-6u38-ea-bin-b04-linux-i586-31_oct_2012.bin(x32)<br/>
jdk-6u38-ea-bin-b04-linux-amd64-31_oct_2012.bin(x64)<br/>
下载地址：<a href="https://jdk6.java.net/download.html  ">https://jdk6.java.net/download.html  </a>
进入到jdk存放目录</p>

<p>```</p>

<p>mkdir /usr/local/java
mv ./jdk-6u38-ea-bin-b04-linux-i586-31_oct_2012.bin /usr/local/java
cd /usr/local/java
chmod 755 ./jdk-6u38-ea-bin-b04-linux-i586-31_oct_2012.bin
./jdk-6u38-ea-bin-b04-linux-i586-31_oct_2012.bin</p>

<p>```</p>

<p>设置环境变量 vi /etc/profile</p>

<p>```</p>

<p>export JAVA_HOME=/usr/local/java/jdk1.6.0_38
export JAVA_BIN=/usr/local/java/jdk1.6.0_38/bin
export PATH=$PATH:$JAVA_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export JAVA_HOME JAVA_BIN PATH CLASSPATH</p>

<p>```
使 /etc/profile立即生效</p>

<p>```
source /etc/profile</p>

<p>```</p>

<h4>3.2. 安装 apache</h4>

<p>3.2.1. 安装apr-1.3.6.tar.gz<br/>
下载地址：
<a href="https://archive.apache.org/dist/apr/apr-1.3.6.tar.gz">https://archive.apache.org/dist/apr/apr-1.3.6.tar.gz</a></p>

<p>```</p>

<p>tar zxvf apr-1.3.6.tar.gz
cd apr-1.3.6
./configure
make
make install</p>

<p>```</p>

<p>3.2.1. 安装apr-util<br/>
下载地址:<a href="https://archive.apache.org/dist/apr/apr-util-1.3.8.tar.gz">https://archive.apache.org/dist/apr/apr-util-1.3.8.tar.gz</a></p>

<p>```</p>

<p>tar zxvf apr-util-1.3.8.tar.gz
cd apr-util-1.3.8
./configure &mdash;with-apr=/usr/local/apr
make
make install</p>

<p>```
3.2.3. 安装apache<br/>
下载地址:<a href="http://pkgs.fedoraproject.org/repo/pkgs/httpd/httpd-2.2.9.tar.gz/80d3754fc278338">http://pkgs.fedoraproject.org/repo/pkgs/httpd/httpd-2.2.9.tar.gz/80d3754fc278338</a> 033296f0d41ef2c04/httpd-2.2.9.tar.gz</p>

<p>```</p>

<p>tar zxvf httpd-2.2.9.tar.gz
cd http-2.2.9
./configure &mdash;prefix=/usr/local/apache2.2.9 &mdash;enable-dav &mdash;enable-so &mdash;enable-maintainer-mode &mdash;with-apr=/usr/local/apr/bin/apr-1-config &mdash;with-apr-util=/usr/local/apr/bin/apu-1-config
make
make install
ln -s apache2.2.9 apache</p>

<p>```</p>

<h4>3.3. 安装subversion</h4>

<p>下载地址:<a href="https://archive.apache.org/dist/subversion/subversion-1.8.5.tar.gz">https://archive.apache.org/dist/subversion/subversion-1.8.5.tar.gz</a></p>

<p>sqlite
<a href="http://jaist.dl.sourceforge.net/project/sqlite.mirror/SQLite%203.8.3.1/sqlite-amalgamation-3080301.zip">http://jaist.dl.sourceforge.net/project/sqlite.mirror/SQLite%203.8.3.1/sqlite-amalgamation-3080301.zip</a>
```</p>

<p>apt-get install zlib1g-dev
tar zxvf subversin-1.8.5.tar.gz
unzip sqlite-amalgamation.zip -d subversion-1.8.5
cd subversion-1.8.5
mv sqlite-amalgmation-3071501 sqlite-amalgamation
./configure &mdash;prefix=/opt/svn &mdash;with-apxs=/usr/local/apache2.2.9/bin/apxs &mdash;with-apr=/usr/local/apr &mdash;with-apr-util=/usr/local/apr
make
make install</p>

<p>```</p>

<p>配置svn<br/>
建立svn版本库目录</p>

<p>```
mkdir -p /home/charles/svndata/repos</p>

<p>```</p>

<p>建立svn版本库</p>

<p>```
svnadmin create /home/charles/svndata/repos</p>

<p>```</p>

<p>修改配置文件
vi /home/charles/svndata/repos/conf/svnserve.conf<br/>
去掉 passwd-db = passwd 的注释</p>

<p><img src="/../images/jenkins_install/jenkins_install_pic_1.png"></p>

<p>修改 passwd 文件,增加用户和密码</p>

<p><img src="/../images/jenkins_install/jenkins_install_pic_2.png"></p>

<p>启动svn服务</p>

<p><code>
svnserve -d -r /home/charles/svndata/repos
</code></p>

<h4>3.4. 安装maven</h4>

<p><code>
cp apache-maven-3.2.1-bin.zip /usr/local cd /usr/local/
unzip apache-maven-3.2.1-bin.zip
ln -s apache-maven-3.2.1 apache-maven 配置环境变量
vi /etc/profile
export JAVA_HOME=/usr/local/ jdk1.6.0_38
export JAVA_BIN=/usr/local/ jdk1.6.0_38/bin
export M2_HOME=/usr/local/ apache-maven
export PATH=$PATH:$JAVA_HOME/bin:$M2_HOME/bin
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar export JAVA_HOME JAVA_BIN PATH CLASSPATH
</code></p>

<p>立即生效配置</p>

<p><code>
source /etc/profile
</code></p>

<h4>3.5. 安装tomcat</h4>

<p>下载地址:<a href="http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.52/bin/apache-tomcat-7.0.52.tar.gz">http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.52/bin/apache-tomcat-7.0.52.tar.gz</a>
<code>
cp apache-tomcat-7.0.52.tar /usr/local/ tar zxvf apache-tomcat-7.0.52.tar
ln -s apache-tomcat-7.0.52 apache-tomcat cd apache-tomcat/bin
./startup.sh
</code></p>

<p><img src="/../images/jenkins_install/jenkins_install_pic_3.png"></p>

<p>打开web页面 <a href="http://localhost:8080">http://localhost:8080</a></p>

<p><img src="/../images/jenkins_install/jenkins_install_pic_4.png"></p>

<p>修改utf8编码
vi /etc/local/java/apache-tomcat-7.0.52/conf/server.xml</p>

<p><img src="/../images/jenkins_install/jenkins_install_pic_5.png"></p>

<h4>3.6. 安装jenkins</h4>

<p>下载地址:<a href="http://mirrors.jenkins-ci.org/war-stable/latest/jenkins.war">http://mirrors.jenkins-ci.org/war-stable/latest/jenkins.war</a></p>

<p>方法1:直接运行<br/>
java -jar jenkins.war</p>

<p>方法2:复制jenkins.war到/usr/local/apache-tomcat/webapps下</p>

<p><code>
cp jenkins.war /usr/local/apache-tomcat/webapps
</code></p>

<p>重启tomcat
打开url <a href="http://localhost:8080/jenkins">http://localhost:8080/jenkins</a></p>

<h4>3.7. 安装jenkins插件</h4>

<p>Publish Over SSH &mdash;>用来控制发布程序后执行脚本</p>

<h4>3.8. git 插件</h4>

<p>git 插件用于连接git 仓库. jenkins默认是不带git 插件,需要自行安装.
安装的git插件分别是:<br/>
<strong>scm-api</strong><br/>
<strong>git-client</strong><br/>
<strong>git</strong></p>

<h3>4. 配置</h3>

<h4>4.1. Linux slave</h4>

<p>4.1.1. 安装jdk(同 3.1 Jdk安装和配置)</p>

<p>4.1.2. 安装maven(同 3.4 安装maven)</p>

<p>4.1.3. 安装ssh服务</p>

<p><code>
sudo /usr/sbin/useradd -m jenkins -d /home/Jenkins echo “jenkins:jenkins” | chpasswd
su - jenkins 切换到 jenkins 用户
java --version 确保 java 安装正确
ssh-keygen 生成 ssh key 信息,按三次回车,表示把 key 存储在 /home/jenkins/.ssh/id_rsa 下,不设置密码
cd .ssh
cat id_rsa.pub &gt; authorized_keys
chmod 700 authorized_keys
将 id_rsa(相当于 privatekey)拷贝到 jenkins master 机器上,例如/root/.jenkins/id_rsa 下
</code></p>

<p>4.1.4 在jenkins页面增加slave
<img src="/../images/jenkins_install/jenkins_install_pic_6.png"><br/>
增加证书<br/>
<img src="/../images/jenkins_install/jenkins_install_pic_7.png"><br/>
设置 publish over ssh<br/>
<img src="/../images/jenkins_install/jenkins_install_pic_8.png"></p>

<h4>4.2. windows slave</h4>

<p>4.2.1. 安装cygwin</p>

<p>选择安装ssh服务,cygwin默认是不安装OpenSSH的,需要手动选,在Netl类别下选上OpenSSH和OpenSSL两项
<img src="/../images/jenkins_install/jenkins_install_pic_9.png"><br/>
等到下载完并完成安装,设置环境变量,把C:/cygwin/bin;C:/cygwin/usr/bin 加 入到系统环境变量的 Path 中</p>

<h3>5. 测试git 仓库</h3>

<p>例如代码库地址:test@114.114.114.114:/home/test/submd/repos/testProject.git</p>

<p>我们需要把本机的id_rsa.pub保存到114.114.114.114的authorized_keys(免密码登陆,请百度),否则会更新不成功,会提示以下错误<br/>
tomcat 必须是该用户启动的,否则也会提示以下错误
<img src="/../images/jenkins_install/jenkins_install_pic_10.png"><br/>
登陆到ci 服务器配置该工程信息
<img src="/../images/jenkins_install/jenkins_install_pic_11.png"></p>

<p><img src="/../images/jenkins_install/jenkins_install_pic_12.png"></p>

<p>构建工程,可以看到输出的结果
<img src="/../images/jenkins_install/jenkins_install_pic_13.png"></p>

<h3>6. 遇到问题以及解决</h3>

<h4>Q: slave /usr/bin/java does not found</h4>

<h4>A: slave中需要安装jdk,jenkins默认查找jdk的路径是/usr/bin/java,解决方法,设置ln链接, 在cygwin中输入以下命令</h4>

<pre><code>ln -s /cygdrive/c/Program\ Files\ \(x86\)/Java/jdk1.6.0_38/bin/java.exe /usr/bin/java
</code></pre>

<h4>Q: 在slave中经常遇到stderr:Host key verification failed.</h4>

<h4>A: 网上大部分是说把knows_keys删除掉,貌似没有效果.个人感觉最有效的方法.就是使用master中ssh到各个slave中,再ssh到代码仓库中,把id_rsa.pub增加到authorized_keys中(免密码登陆).</h4>

<p><img src="/../images/jenkins_install/jenkins_install_pic_14.png"></p>

<h4>Q: ssh 连接到slave时候,输入正确的账号密码,但经常遇到Permission denied 问题</h4>

<h4>A: 一种是由于authorized_keys 权限设置不对导致,设置authorized_keys 权限为644,一种由于账号没配置对导致,可以执行以下命令</h4>

<p><code>mkpasswd.exe -l &gt; /etc/pass</code></p>
]]></content>
  </entry>
  
</feed>
